{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","numberLoc","formatLocale","numberItIT","fmtInt","format","fmtPerc","fmtTime","timeFormatLocale","timeItIT","useState","data","setData","Date","lastUpdate","setLastUpdate","lastDays","lastDate","setLastDate","population","setPopulation","populationFraction","doses","administrationsPerDay","setAdministrationsPerDay","avgAdministrationsLastDays","setAvgAdministrationsLastDays","administrations","setAdministrations","remainingAdministrations","setRemainingAdministrations","remainingDays","setRemainingDays","useEffect","window","fetch","then","json","ultimo_aggiornamento","sum","d","totale","res","filter","area","sort","a","b","descending","data_somministrazione","rollups","v","slice","days","datetime","setDate","getDate","Math","round","className","toLowerCase","floor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.affa04a6.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport { rollups, sum, descending } from 'd3-array'\nimport { formatLocale } from 'd3-format'\nimport { timeFormatLocale } from 'd3-time-format'\nimport numberItIT from 'd3-format/locale/it-IT.json'\nimport timeItIT from 'd3-time-format/locale/it-IT.json'\n\nimport './App.css'\n\nfunction App () {\n  const numberLoc = formatLocale(numberItIT)\n  const fmtInt = numberLoc.format(',d')\n  const fmtPerc = numberLoc.format('.0%')\n\n  const timeLoc = timeFormatLocale(timeItIT)\n  const fmtTime = timeLoc.format('%A %d %B %Y')\n\n  const [data, setData] = useState([])\n  const [lastUpdate, setLastUpdate] = useState(new Date())\n  const [lastDays, setLastDays] = useState(7)\n  const [lastDate, setLastDate] = useState(new Date())\n  const [population, setPopulation] = useState(6e7)\n  const [populationFraction, setPopulationFraction] = useState(0.8)\n  const [doses, setDoses] = useState(2)\n  const [administrationsPerDay, setAdministrationsPerDay] = useState([])\n  const [avgAdministrationsLastDays, setAvgAdministrationsLastDays] = useState([])\n  const [administrations, setAdministrations] = useState(0)\n  const [remainingAdministrations, setRemainingAdministrations] = useState(0)\n  const [remainingDays, setRemainingDays] = useState(0)\n\n  useEffect(() => {\n    window.fetch('./last-update-dataset.json')\n      .then(data => data.json())\n      .then(data => { setLastUpdate(new Date(data.ultimo_aggiornamento)) })\n    window.fetch('./popolazione_residente_2020.json')\n      .then(data => data.json())\n      .then(data => { setPopulation(sum(data, d => d.totale)) })\n    window.fetch('./somministrazioni-vaccini-summary-latest.json')\n      .then(res => res.json())\n      .then(res => res.data)\n      .then(data => data.filter(d => d.area !== 'ITA'))\n      .then(data => data.sort((a, b) => descending(a.data_somministrazione, b.data_somministrazione)))\n      .then(data => { setData(data) })\n  }, [])\n\n  useEffect(() => {\n    setAdministrationsPerDay(\n      rollups(\n        data,\n        v => sum(v, d => d.totale),\n        d => d.data_somministrazione\n      )\n    )\n\n    setAdministrations(\n      sum(data, d => d.totale)\n    )\n  }, [data])\n\n  useEffect(() => {\n    setAvgAdministrationsLastDays(\n      sum(\n        administrationsPerDay.slice(0, lastDays),\n        d => d[1]\n      ) / lastDays\n    )\n  }, [administrationsPerDay, lastDays])\n\n  useEffect(() => {\n    setRemainingAdministrations(\n      doses * population * populationFraction - administrations\n    )\n  }, [doses, population, populationFraction, administrations])\n\n  useEffect(() => {\n    const days = remainingAdministrations / avgAdministrationsLastDays\n    const datetime = new Date()\n    datetime.setDate(datetime.getDate() + Math.round(days))\n    setRemainingDays(days)\n    setLastDate(datetime)\n  }, [remainingAdministrations, avgAdministrationsLastDays])\n\n  return (\n    <div className='App'>\n      <p>Termine previsto della campagna vaccinale italiana contro <em>Sars-CoV-2</em>.</p>\n      <h1>{fmtTime(lastDate)}</h1>\n      <p>\n        L'Italia ha iniziato a somministrare il primo vaccino approvato dall'EMA e dall'AIFA il <em>27 dicembre 2020</em>.\n        A oggi, <em>{fmtTime(lastUpdate).toLowerCase()}</em>, sono state somministrate <em>{fmtInt(administrations)} dosi</em> a livello nazionale,\n        ne mancano <em>{fmtInt(remainingAdministrations)}</em> prima di riuscire a vaccinare l'<em>{fmtPerc(populationFraction)}</em> della popolazione italiana\n        con <em>{fmtInt(doses)} dosi</em> a testa.\n        Al ritmo di <em>{fmtInt(avgAdministrationsLastDays)} dosi</em> somministrate al giorno tenuto negli ultimi <em>{fmtInt(lastDays)} giorni</em>,\n        mancano <em>{Math.floor(remainingDays / 365)} anni, {Math.floor((remainingDays % 365) / 30)} mesi e {Math.floor(remainingDays % 12)} giorni</em> prima di raggiungere <em>l'immunit√† di gregge</em>.\n      </p>\n      <div className='Cube lt' />\n      <div className='Cube lb' />\n      <div className='Cube rt' />\n      <div className='Cube rb' />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}