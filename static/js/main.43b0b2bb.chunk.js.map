{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","numberLoc","formatLocale","numberItIT","fmtInt","format","fmtPerc","timeLoc","timeFormatLocale","timeItIT","fmtDate","fmtMonthYear","fmtISODate","useState","indexedData","setIndexedData","dataPerArea","setDataPerArea","indexedPopulation","setIndexedPopulation","populationPerArea","setPopulationPerArea","useQueryParam","withDefault","NumberParam","populationFraction","setPopulationFraction","areas","setAreas","StringParam","area","setArea","Date","lastUpdate","setLastUpdate","lastDays","setLastDays","lastDate","setLastDate","doses","setDoses","administrations","setAdministrations","vaccinatedPeople","setVaccinatedPeople","remainingAdministrations","setRemainingAdministrations","remainingDays","setRemainingDays","administrationsPerDay","setAdministrationsPerDay","vaccinatedPeoplePerDay","setVaccinatedPeoplePerDay","avgAdministrationsLastDays","setAvgAdministrationsLastDays","avgVaccinatedPeopleLastDays","setAvgVaccinatedPeopleLastDays","targetMonth","setTargetMonth","getFullYear","targetYear","setTargetYear","targetDate","setTargetDate","targetAvgAdministrationsPerDay","setTargetAvgAdministrationsPerDay","nextMilestone","setNextMilestone","nextMilestoneRemainingDays","setNextMilestoneRemainingDays","nextMilestoneRemainingAdministrations","setNextMilestoneRemainingAdministrations","nextMilestoneTargetAvgAdministrationsPerDay","setNextMilestoneTargetAvgAdministrationsPerDay","isReady","setIsReady","dialogOpen","setDialogOpen","handleOpenDialog","handleCloseDialog","useEffect","Promise","all","window","fetch","then","data","json","ultimo_aggiornamento","sort","a","b","ascending","order","Object","fromEntries","group","d","startDate","filter","endDate","res","descending","data_somministrazione","currentDate","currentMonth","getMonth","totale","rollups","v","sum","seconda_dose","slice","days","datetime","setDate","getDate","Math","round","total","Container","className","maxWidth","style","opacity","Grid","container","direction","justify","spacing","item","href","onClick","nome","component","Select","value","length","onChange","e","target","map","MenuItem","toLowerCase","TextField","inputProps","type","min","max","step","InputProps","endAdornment","InputAdornment","position","months","m","i","toLocaleLowerCase","people","p","join","rel","Box","alignContent","xs","Help","color","title","he","decode","encodeURIComponent","location","Twitter","Facebook","LinkedIn","Mail","InsertLink","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","autoFocus","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createMuiTheme","palette","secondary","main","typography","fontFamily","overrides","MuiInput","root","padding","backgroundColor","ReactDOM","render","ReactRouterRoute","Route","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.43b0b2bb.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport he from 'he'\n\nimport {\n  useQueryParam,\n  NumberParam,\n  StringParam,\n  withDefault\n} from 'use-query-params'\n\nimport {\n  TextField,\n  InputAdornment,\n  Select,\n  MenuItem,\n  Container,\n  Grid,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Button,\n  Box\n} from '@material-ui/core'\n\nimport {\n  Facebook,\n  Help,\n  InsertLink,\n  LinkedIn,\n  Mail,\n  Twitter\n} from '@material-ui/icons'\n\nimport { rollups, group, sum, ascending, descending } from 'd3-array'\nimport { formatLocale } from 'd3-format'\nimport { timeFormatLocale } from 'd3-time-format'\nimport numberItIT from 'd3-format/locale/it-IT.json'\nimport timeItIT from 'd3-time-format/locale/it-IT.json'\n\nimport './App.css'\n\nfunction App () {\n  const numberLoc = formatLocale(numberItIT)\n  const fmtInt = numberLoc.format(',d')\n  const fmtPerc = numberLoc.format('.1%')\n\n  const timeLoc = timeFormatLocale(timeItIT)\n  const fmtDate = timeLoc.format('%A %e %B %Y')\n  const fmtMonthYear = timeLoc.format('%B %Y')\n  const fmtISODate = timeLoc.format('%Y-%m-%d')\n\n  // Daily data indexed by area\n  const [indexedData, setIndexedData] = useState({})\n  // Daily data per area\n  const [dataPerArea, setDataPerArea] = useState([])\n\n  // Population indexed by area\n  const [indexedPopulation, setIndexedPopulation] = useState({})\n  // Population per area\n  const [populationPerArea, setPopulationPerArea] = useState(6e7)\n  // Population fraction to be vaccinated (final goal)\n  const [populationFraction, setPopulationFraction] = useQueryParam('populationFraction', withDefault(NumberParam, 0.7))\n\n  // All available area\n  const [areas, setAreas] = useState([])\n  // Selected area\n  const [area, setArea] = useQueryParam('area', withDefault(StringParam, 'ITA'))\n\n  // Last data update\n  const [lastUpdate, setLastUpdate] = useState(new Date())\n  // Width of average time window\n  const [lastDays, setLastDays] = useQueryParam('lastDays', withDefault(NumberParam, 7))\n  // Selected milestone when population fraction will be vaccinated\n  const [lastDate, setLastDate] = useState(new Date())\n\n  // Selected doses per person\n  const [doses, setDoses] = useQueryParam('doses', withDefault(NumberParam, 2))\n\n  // Total number of administrations\n  const [administrations, setAdministrations] = useState(0)\n  // Total number of vaccinations (second dose administrations)\n  const [vaccinatedPeople, setVaccinatedPeople] = useState(0)\n  // Remaining administrations to final goal\n  const [remainingAdministrations, setRemainingAdministrations] = useState(0)\n  // Remaining days to final goal\n  const [remainingDays, setRemainingDays] = useState(0)\n  // Rate of administrations\n  const [administrationsPerDay, setAdministrationsPerDay] = useState([])\n  // Rate of vaccinations (second dose administrations)\n  const [vaccinatedPeoplePerDay, setVaccinatedPeoplePerDay] = useState([])\n  // Average rate of administrations in last days\n  const [avgAdministrationsLastDays, setAvgAdministrationsLastDays] = useState(0)\n  // Average rate of vaccinations in last days\n  const [avgVaccinatedPeopleLastDays, setAvgVaccinatedPeopleLastDays] = useState(0)\n  // Selected final goal month\n  const [targetMonth, setTargetMonth] = useQueryParam('targetMonth', withDefault(NumberParam, 8))\n  // Selected final goal year\n  const [targetYear, setTargetYear] = useQueryParam('targetYear', withDefault(NumberParam, (new Date()).getFullYear()))\n  // Selected final goal date\n  const [targetDate, setTargetDate] = useState(new Date())\n  // Average rate of administrations to reach the final goal within selected date\n  const [targetAvgAdministrationsPerDay, setTargetAvgAdministrationsPerDay] = useState(0)\n\n  // Next milestone\n  const [nextMilestone, setNextMilestone] = useState({})\n  // Remaining days to next milestone\n  const [nextMilestoneRemainingDays, setNextMilestoneRemainingDays] = useState(0)\n  // Remaining administrations to next milestone\n  const [nextMilestoneRemainingAdministrations, setNextMilestoneRemainingAdministrations] = useState(0)\n  // Rate required for the next milestone\n  const [nextMilestoneTargetAvgAdministrationsPerDay, setNextMilestoneTargetAvgAdministrationsPerDay] = useState(0)\n\n  const [isReady, setIsReady] = useState(false)\n  const [dialogOpen, setDialogOpen] = useState(false)\n\n  function handleOpenDialog () {\n    setDialogOpen(true)\n  }\n\n  function handleCloseDialog () {\n    setDialogOpen(false)\n  }\n\n  // Download all requested data on page load\n  useEffect(() => {\n    Promise.all([\n      window.fetch('../vaccinipertutti-data/last-update-dataset.json')\n        .then(data => data.json())\n        .then(data => { setLastUpdate(new Date(data.ultimo_aggiornamento)) }),\n      window.fetch('../vaccinipertutti-data/popolazione_residente_2020.json')\n        .then(data => data.json())\n        .then(data => data.sort((a, b) => ascending(a.order, b.order)))\n        .then(data => {\n          setAreas(data)\n          setIndexedPopulation(Object.fromEntries(group(data, d => d.area)))\n        }),\n      window.fetch('../vaccinipertutti-data/campaign-milestones.json')\n        .then(data => data.json())\n        .then(data => data.sort((a, b) => ascending(a.startDate, b.startDate)))\n        .then(data => data.filter(d => (new Date(d.startDate) < new Date()) && (new Date(d.endDate) > new Date())))\n        .then(data => { setNextMilestone(data?.[0]) }),\n      window.fetch('../vaccinipertutti-data/somministrazioni-vaccini-summary-latest.json')\n        .then(res => res.json())\n        .then(res => res.data)\n        .then(data => data.sort((a, b) => descending(a.data_somministrazione, b.data_somministrazione)))\n        .then(data => {\n          setIndexedData(Object.fromEntries(group(data, d => d.area)))\n        })\n    ]).then(() => { setIsReady(true) })\n  }, [])\n\n  // On user selection of month and year of final goal, compute full date\n  useEffect(() => {\n    const currentDate = new Date()\n    const currentMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0)\n    const selectedMonth = new Date(targetYear, targetMonth + 1, 0)\n\n    // Check to avoid selection of past months\n    if (selectedMonth > currentMonth) {\n      setTargetDate(new Date(targetYear, targetMonth + 1, 0))\n    } else {\n      setTargetMonth(targetDate.getMonth())\n      setTargetYear(targetDate.getFullYear())\n    }\n  }, [targetMonth, targetYear])\n\n  // On user selection of area, update administrations data per area\n  useEffect(() => {\n    setDataPerArea(indexedData[area] || [])\n  }, [indexedData, area])\n\n  // On user selection of area, update population per area\n  useEffect(() => {\n    if (indexedPopulation[area]) {\n      setPopulationPerArea(indexedPopulation[area][0].totale)\n    }\n  }, [indexedPopulation, area])\n\n  useEffect(() => {\n    // Compute partial aggregation (sum of administrations) per day\n    setAdministrationsPerDay(\n      rollups(\n        dataPerArea,\n        v => sum(v, d => d.totale),\n        d => fmtISODate(new Date(d.data_somministrazione))\n      )\n    )\n\n    // Compute partial aggregation (sum of vaccinated people) per day\n    setVaccinatedPeoplePerDay(\n      rollups(\n        dataPerArea,\n        v => sum(v, d => d.seconda_dose),\n        d => fmtISODate(new Date(d.data_somministrazione))\n      )\n    )\n\n    // Update total administrations\n    setAdministrations(\n      sum(dataPerArea, d => d.totale)\n    )\n\n    // Update total vaccinated people\n    setVaccinatedPeople(\n      sum(dataPerArea, d => d.seconda_dose)\n    )\n  }, [dataPerArea])\n\n  // Compute average rate of administrations to reach the final goal within selected date\n  useEffect(() => {\n    setTargetAvgAdministrationsPerDay(remainingAdministrations / (targetDate - (new Date())) * 1000 * 60 * 60 * 24)\n  }, [targetDate, remainingAdministrations])\n\n  // Compute administrations rate in last days, filtering out today administrations to avoid underestimation\n  useEffect(() => {\n    setAvgAdministrationsLastDays(\n      sum(\n        administrationsPerDay.filter(d => d[0] !== fmtISODate(new Date())).slice(0, lastDays),\n        d => d[1]\n      ) / lastDays\n    )\n  }, [administrationsPerDay, lastDays])\n\n  // Compute vaccinated people rate in last days, filtering out today administrations to avoid underestimation\n  useEffect(() => {\n    setAvgVaccinatedPeopleLastDays(\n      sum(\n        vaccinatedPeoplePerDay.filter(d => d[0] !== fmtISODate(new Date())).slice(0, lastDays),\n        d => d[1]\n      ) / lastDays\n    )\n  }, [vaccinatedPeoplePerDay, lastDays])\n\n  // Compute remaining administrations for final goal\n  useEffect(() => {\n    setRemainingAdministrations(\n      doses * populationPerArea * populationFraction - administrations\n    )\n  }, [doses, populationPerArea, populationFraction, administrations])\n\n  // Compute remaining days and date of final goal\n  useEffect(() => {\n    const days = remainingAdministrations / avgAdministrationsLastDays\n    const datetime = new Date()\n    datetime.setDate(datetime.getDate() + Math.round(days))\n    setRemainingDays(days)\n    setLastDate(datetime)\n  }, [remainingAdministrations, avgAdministrationsLastDays])\n\n  // Compute remaining days and administrations for next milestone\n  useEffect(() => {\n    setNextMilestoneRemainingDays((new Date(nextMilestone.endDate) - new Date()) / (1000 * 60 * 60 * 24))\n    setNextMilestoneRemainingAdministrations((doses * nextMilestone.total) - administrations)\n  }, [doses, nextMilestone, administrations])\n\n  // Compute requested average rate of administrations to reach next milestone\n  useEffect(() => {\n    setNextMilestoneTargetAvgAdministrationsPerDay(nextMilestoneRemainingAdministrations / nextMilestoneRemainingDays)\n  }, [nextMilestoneRemainingAdministrations, nextMilestoneRemainingDays])\n\n  return (\n    <>\n      <Container className='container' maxWidth='md' style={{ opacity: +isReady }}>\n        <Grid container direction='column' justify='center' spacing={2}>\n          <Grid item className='footerText'>\n            Che cos'è questa pagina? <a href='#' onClick={handleOpenDialog}>Scoprilo!</a>\n          </Grid>\n          <Grid item className='supTitle'>Termine previsto della campagna vaccinale in <em>{indexedPopulation[area]?.[0]?.nome}</em> contro Sars-CoV-2.</Grid>\n          <Grid item component='h1' className='mainTitle'>{fmtDate(lastDate)}</Grid>\n          {/* <Grid item className='footerText'>\n            Come l'abbiamo calcolato? <a href='#' onClick={handleOpenDialog}>Scoprilo!</a>\n          </Grid> */}\n          <Grid item className='mainText'>\n            In <Select value={areas.length ? area : ''} onChange={e => setArea(e.target.value)}>{areas.map(a => <MenuItem key={a.area} value={a.area}>{a.nome}</MenuItem>)}</Select> si è iniziato a somministrare il primo vaccino il <em>27 dicembre 2020</em>.\n            A {lastUpdate.getDate() === (new Date()).getDate() ? 'oggi' : 'ieri'}, <em>{fmtDate(lastUpdate).toLowerCase()}</em>, sono state somministrate <em>{fmtInt(administrations)}</em> dosi,\n            ma ne mancano <em>{fmtInt(remainingAdministrations)}</em> per vaccinare il <TextField value={populationFraction * 100} onChange={e => setPopulationFraction(+e.target.value / 100)} inputProps={{ type: 'number', min: 60, max: 100, step: 5 }} InputProps={{ endAdornment: <InputAdornment position='end'>%</InputAdornment> }} /> della popolazione\n            con <TextField value={doses} onChange={e => setDoses(+e.target.value)} inputProps={{ type: 'number', min: 1, max: 2, step: 1 }} /> dosi a testa.\n          </Grid>\n          <Grid item className='mainText'>\n            Al ritmo di <em>{fmtInt(avgAdministrationsLastDays)}</em> somministrazioni al giorno tenuto negli ultimi <TextField value={lastDays} onChange={e => setLastDays(+e.target.value)} inputProps={{ type: 'number', min: 1, max: administrationsPerDay.length, step: 1 }} /> giorni,\n            mancano <em>{fmtInt(remainingDays / 365)} anni, {fmtInt((remainingDays % 365) / 30)} mesi e {fmtInt(remainingDays % 12)} giorni</em> prima di raggiungere l'obiettivo.\n            Per farlo entro <Select value={targetMonth} onChange={e => setTargetMonth(+e.target.value)}>{timeItIT.months.map((m, i) => <MenuItem key={i} value={i}>{m.toLocaleLowerCase()}</MenuItem>)}</Select> <TextField value={targetYear} onChange={e => setTargetYear(+e.target.value)} inputProps={{ type: 'number', min: (new Date()).getFullYear(), max: (new Date()).getFullYear() + 10, step: 1 }} /> bisognerebbe somministrare una media di <em>{fmtInt(targetAvgAdministrationsPerDay)}</em> dosi al giorno.\n          </Grid>\n          <Grid item className='mainText'>\n            Attualmente le persone vaccinate con due dosi sono <em>{fmtInt(vaccinatedPeople)}</em> (una media di <em>{fmtInt(avgVaccinatedPeopleLastDays)}</em> al giorno), pari allo <em>{fmtPerc(vaccinatedPeople / (populationFraction * populationPerArea))}</em> dell'obiettivo di copertura vaccinale della popolazione.\n          </Grid>\n          {\n            area === 'ITA' ? (\n              nextMilestoneTargetAvgAdministrationsPerDay < avgAdministrationsLastDays\n                ? (\n                  <Grid item className='mainText'>\n                    Il ritmo attuale è in linea con il prossimo obiettivo di vaccinare <em>{fmtInt(nextMilestone.total)}</em> persone ({nextMilestone.people?.map(p => p.type).join(', ')}) entro <em>{fmtMonthYear(new Date(nextMilestone.endDate))}</em>.\n                  </Grid>\n                ) : (\n                  <Grid item className='mainText'>\n                    Il ritmo attuale dovrebbe aumentare del <em>{fmtPerc((nextMilestoneTargetAvgAdministrationsPerDay - avgAdministrationsLastDays) / nextMilestoneTargetAvgAdministrationsPerDay)}</em> per raggiungere il prossimo obiettivo di vaccinare <em>{fmtInt(nextMilestone.total)}</em> persone ({nextMilestone.people?.map(p => p.type).join(', ')}) entro <em>{fmtMonthYear(new Date(nextMilestone.endDate))}</em>.\n                  </Grid>\n                )\n              ) : null\n          }\n          <Grid item className='footerText'>\n            Un progetto a cura dell'<a href='https://ondata.it' target='_blank' rel='noreferrer'>Associazione onData</a>.\n          </Grid>\n          <Box className='Flower lt' />\n          <Box className='Flower lb' />\n          <Box className='Cube rt icon'>\n            <Grid container justify='center' alignContent='center' direction='column'>\n              <Grid item xs><Help color='primary' onClick={handleOpenDialog} /></Grid>\n              <Grid item xs><a title='Condividi su Twitter' href={`https://twitter.com/share?text=\"${he.decode(`Termine previsto della campagna vaccinale in ${indexedPopulation[area]?.[0]?.nome} contro Sars-CoV-2: ${fmtDate(lastDate)}`)}\" via @ondatait&hashtags=datiBeneComune&url=${encodeURIComponent(window.location.href)}`} target='_blank' rel='noreferrer'><Twitter color='primary' /></a></Grid>\n              <Grid item xs><a title='Condividi su Facebook' href={`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(window.location.href)}&hashtag=${encodeURIComponent('#datiBeneComune')}`} target='_blank' rel='noreferrer'><Facebook color='primary' /></a></Grid>\n              <Grid item xs><a title='Condividi su LinkedIn' href={`https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(window.location.href)}`} target='_blank' rel='noreferrer'><LinkedIn color='primary' /></a></Grid>\n              <Grid item xs><a title='Condividi via e-mail' href={`mailto:?subject=\"${he.decode(`#datiBeneComune - Termine previsto della campagna vaccinale in ${indexedPopulation[area]?.[0]?.nome} contro Sars-CoV-2: ${fmtDate(lastDate)}`)}\" via onData - APS&body=${he.decode(`In ${indexedPopulation[area]?.[0]?.nome} si è iniziato a somministrare il primo vaccino il 27 dicembre 2020`)}... Continua a leggere su ${encodeURIComponent(window.location.href)}`} target='_blank' rel='noreferrer'><Mail color='primary' /></a></Grid>\n              <Grid item xs><a title='Permalink' href={window.location.href} target='_blank' rel='noreferrer'><InsertLink color='primary' /></a></Grid>\n            </Grid>\n          </Box>\n          <Box className='Flower rb' />\n        </Grid>\n      </Container>\n      <Dialog\n        open={dialogOpen}\n        onClose={handleCloseDialog}\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'\n      >\n        <DialogTitle id='alert-dialog-title'>\"Vaccini per tutti\" by onData</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            \"Vaccini per tutti\" è un'applicazione sperimentale <b>non ufficiale</b> che permette di stimare i tempi di avanzamento della campagna di vaccinazione in Italia sulla base degli open data ufficiali del <a href='https://github.com/italia/covid19-opendata-vaccini/' target='_blank' rel='noreferrer'>Commissario straordinario per l'emergenza Covid-19 - Presidenza del Consiglio dei Ministri</a>, dell'<a href='https://www.epicentro.iss.it/vaccini/covid-19-piano-vaccinazione' target='_blank' rel='noreferrer'>Istituto Superiore di Sanità</a> e di <a href='http://demo.istat.it/popres/index.php?anno=2020&lingua=ita' target='_blank' rel='noreferrer'>ISTAT</a>.\n          </DialogContentText>\n          <DialogContentText>\n            Tutte le informazioni contenute in questa pagina sono da prendersi così <a href='https://en.wikipedia.org/wiki/As_is' target='_blank' rel='noreferrer'>come sono</a>, senza nessuna garanzia di correttezza o pretesa di affidabilità.\n            I dati sottostanti sono aggiornati quotidianamente dalle fonti indicate e le stime cambiano quindi ogni giorno seguendo l'andamento della campagna vaccinale.\n          </DialogContentText>\n          <DialogContentText>\n            Se hai un dubbio o vuoi fare una segnalazione, puoi <a href='https://github.com/ondata/vaccinipertutti/issues' target='_blank' rel='noreferrer'>aprire una issue</a>.\n          </DialogContentText>\n          <DialogContentText>\n            L'applicazione è sviluppata e mantenuta da <a href='https://github.com/jenkin' target='_blank' rel='noreferrer'>@jenkin</a> per <a href='https://ondata.it/' target='_blank' rel='noreferrer'>onData APS</a>, associazione di promozione sociale che promuove l'apertura dei dati pubblici per renderli accessibili a tutte e tutti.\n          </DialogContentText>\n          <DialogContentText>\n            Il codice sorgente è open source e rilasciato sotto <a href='https://tldrlegal.com/license/mit-license' target='_blank' rel='noreferrer'>licenza MIT</a> su Github: <a href='https://github.com/ondata/vaccinipertutti' target='_blank' rel='noreferrer'>ondata/vaccinipertutti</a>. Questa pagina è ospitata dal servizio <a href='https://pages.github.com/' target='_blank' rel='noreferrer'>Github Pages</a> e fa esclusivamente uso di cookie tecnici: non traccia né profila in alcun modo gli utenti.\n          </DialogContentText>\n          <DialogContentText>\n            Puoi sostenere l'attività di onData in molti modi, <a href='https://sostieni.ondata.it/' target='_blank' rel='noreferrer'>dai un'occhiata</a>!\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseDialog} color='secondary' autoFocus>\n            Ho capito, grazie!\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { QueryParamProvider } from 'use-query-params'\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\n\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nconst theme = createMuiTheme({\n  palette: {\n    secondary: {\n      main: '#e82f7d'\n    }\n  },\n  typography: {\n    fontFamily: [\n      '\"Titillium Web\"',\n      'sans-serif'\n    ]\n  },\n  overrides: {\n    MuiInput: {\n      root: {\n        padding: '0 .5em',\n        backgroundColor: '#e82f7d'\n      }\n    }\n  }\n})\n\nReactDOM.render(\n  <Router>\n    <QueryParamProvider ReactRouterRoute={Route}>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </QueryParamProvider>\n  </Router>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}