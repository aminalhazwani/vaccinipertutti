{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","numberLoc","formatLocale","numberItIT","fmtInt","format","fmtPerc","timeLoc","timeFormatLocale","timeItIT","fmtDate","fmtISODate","fmtMonth","fmtYear","useState","Map","indexedData","setIndexedData","data","setData","areaKey","areaName","setAreaName","Date","lastUpdate","setLastUpdate","lastDays","lastDate","setLastDate","indexedPopulation","setIndexedPopulation","population","setPopulation","populationFraction","doses","administrationsPerDay","setAdministrationsPerDay","avgAdministrationsLastDays","setAvgAdministrationsLastDays","administrations","setAdministrations","remainingAdministrations","setRemainingAdministrations","remainingDays","setRemainingDays","targetMonth","getFullYear","targetYear","targetDate","setTargetDate","targetAvgAdministrationsPerDay","setTargetAvgAdministrationsPerDay","useEffect","window","fetch","then","json","ultimo_aggiornamento","group","d","area","res","sort","a","b","descending","data_somministrazione","get","nome","totale","rollups","v","sum","getTime","slice","days","datetime","setDate","getDate","Math","round","className","toLowerCase","floor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b03d3e00.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport { rollups, group, sum, descending } from 'd3-array'\nimport { formatLocale } from 'd3-format'\nimport { timeFormatLocale } from 'd3-time-format'\nimport numberItIT from 'd3-format/locale/it-IT.json'\nimport timeItIT from 'd3-time-format/locale/it-IT.json'\n\nimport './App.css'\n\nfunction App () {\n  const numberLoc = formatLocale(numberItIT)\n  const fmtInt = numberLoc.format(',d')\n  const fmtPerc = numberLoc.format('.0%')\n\n  const timeLoc = timeFormatLocale(timeItIT)\n  const fmtDate = timeLoc.format('%A %e %B %Y')\n  const fmtISODate = timeLoc.format('%Y-%M-%d')\n  const fmtMonth = timeLoc.format('%B')\n  const fmtYear = timeLoc.format('%Y')\n\n  const [indexedData, setIndexedData] = useState(new Map())\n  const [data, setData] = useState([])\n  const [areaKey, setAreaKey] = useState('ITA')\n  const [areaName, setAreaName] = useState('Italia')\n  const [lastUpdate, setLastUpdate] = useState(new Date())\n  const [lastDays, setLastDays] = useState(7)\n  const [lastDate, setLastDate] = useState(new Date())\n  const [indexedPopulation, setIndexedPopulation] = useState(new Map())\n  const [population, setPopulation] = useState(6e7)\n  const [populationFraction, setPopulationFraction] = useState(0.8)\n  const [doses, setDoses] = useState(2)\n  const [administrationsPerDay, setAdministrationsPerDay] = useState([])\n  const [avgAdministrationsLastDays, setAvgAdministrationsLastDays] = useState([])\n  const [administrations, setAdministrations] = useState(0)\n  const [remainingAdministrations, setRemainingAdministrations] = useState(0)\n  const [remainingDays, setRemainingDays] = useState(0)\n  const [targetMonth, setTargetMonth] = useState(11)\n  const [targetYear, setTargetYear] = useState((new Date()).getFullYear())\n  const [targetDate, setTargetDate] = useState(new Date())\n  const [targetAvgAdministrationsPerDay, setTargetAvgAdministrationsPerDay] = useState(0)\n\n  useEffect(() => {\n    window.fetch('./last-update-dataset.json')\n      .then(data => data.json())\n      .then(data => { setLastUpdate(new Date(data.ultimo_aggiornamento)) })\n    window.fetch('./popolazione_residente_2020.json')\n      .then(data => data.json())\n      .then(data => { setIndexedPopulation(group(data, d => d.area)) })\n    window.fetch('./somministrazioni-vaccini-summary-latest.json')\n      .then(res => res.json())\n      .then(res => res.data)\n      .then(data => data.sort((a, b) => descending(a.data_somministrazione, b.data_somministrazione)))\n      .then(data => { setIndexedData(group(data, d => d.area)) })\n  }, [])\n\n  useEffect(() => {\n    setTargetDate(new Date(targetYear, targetMonth, 0))\n  }, [targetMonth, targetYear])\n\n  useEffect(() => {\n    if (indexedData.get(areaKey)) {\n      setData(indexedData.get(areaKey) || [])\n    }\n  }, [indexedData, areaKey])\n\n  useEffect(() => {\n    if (indexedPopulation.get(areaKey)) {\n      setAreaName(indexedPopulation.get(areaKey)[0].nome)\n      setPopulation(indexedPopulation.get(areaKey)[0].totale)\n    }\n  }, [indexedPopulation, areaKey])\n\n  useEffect(() => {\n    setAdministrationsPerDay(\n      rollups(\n        data,\n        v => sum(v, d => d.totale),\n        d => fmtISODate(new Date(d.data_somministrazione))\n      )\n    )\n\n    setAdministrations(\n      sum(data, d => d.totale)\n    )\n  }, [data])\n\n  useEffect(() => {\n    setTargetAvgAdministrationsPerDay(remainingAdministrations / (targetDate.getTime() - (new Date()).getTime()) * 1000 * 60 * 60 * 24)\n  }, [targetDate, remainingAdministrations])\n\n  useEffect(() => {\n    setAvgAdministrationsLastDays(\n      sum(\n        administrationsPerDay.slice(1, lastDays + 1),\n        d => d[1]\n      ) / lastDays\n    )\n  }, [administrationsPerDay, lastDays])\n\n  useEffect(() => {\n    setRemainingAdministrations(\n      doses * population * populationFraction - administrations\n    )\n  }, [doses, population, populationFraction, administrations])\n\n  useEffect(() => {\n    const days = remainingAdministrations / avgAdministrationsLastDays\n    const datetime = new Date()\n    datetime.setDate(datetime.getDate() + Math.round(days))\n    setRemainingDays(days)\n    setLastDate(datetime)\n  }, [remainingAdministrations, avgAdministrationsLastDays])\n\n  return (\n    <div className='App'>\n      <p>Termine previsto della campagna vaccinale in <em>{areaName}</em> contro Sars-CoV-2.</p>\n      <h1>{fmtDate(lastDate)}</h1>\n      <p>\n        In <em>{areaName}</em> si Ã¨ iniziato a somministrare il primo vaccino il <em>27 dicembre 2020</em>.\n        A oggi, <em>{fmtDate(lastUpdate).toLowerCase()}</em>, sono state somministrate <em>{fmtInt(administrations)}</em> dosi,\n        ma ne mancano <em>{fmtInt(remainingAdministrations)}</em> per vaccinare l'<em>{fmtPerc(populationFraction)}</em> della popolazione\n        con <em>{fmtInt(doses)}</em> dosi a testa.\n        Al ritmo di <em>{fmtInt(avgAdministrationsLastDays)}</em> somministrazioni al giorno tenuto negli ultimi <em>{fmtInt(lastDays)} giorni</em>,\n        mancano <em>{Math.floor(remainingDays / 365)} anni, {Math.floor((remainingDays % 365) / 30)} mesi e {Math.floor(remainingDays % 12)} giorni</em> prima di raggiungere <em>l'immunitÃ  di gregge</em>.\n        Per ottenerla entro <em>{fmtMonth(targetDate).toLowerCase()} {fmtYear(targetDate)}</em> bisognerebbe somministrare una media di <em>{fmtInt(targetAvgAdministrationsPerDay)}</em> dosi al giorno.\n      </p>\n      <div className='Cube lt' />\n      <div className='Cube lb' />\n      <div className='Cube rt' />\n      <div className='Cube rb' />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}