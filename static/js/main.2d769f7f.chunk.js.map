{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","lastDays","Date","lastDate","setLastDate","population","populationFraction","administrationsPerDay","setAdministrationsPerDay","avgAdministrationsLastDays","setAvgAdministrationsLastDays","administrations","setAdministrations","remainingDays","setRemainingDays","useEffect","window","fetch","then","res","json","filter","d","area","sort","a","b","descending","data_somministrazione","rollups","v","sum","totale","slice","days","datetime","setDate","getDate","Math","round","className","toString","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAqDeA,MAjDf,WAAiB,IAAD,EACUC,mBAAS,IADnB,mBACPC,EADO,KACDC,EADC,OAEkBF,mBAAS,GAF3B,mBAEPG,EAFO,aAGkBH,mBAAS,IAAII,OAH/B,mBAGPC,EAHO,KAGGC,EAHH,OAIsBN,mBAAS,KAJ/B,mBAIPO,EAJO,aAKsCP,mBAAS,KAL/C,mBAKPQ,EALO,aAM4CR,mBAAS,KANrD,mBAMPS,EANO,KAMgBC,EANhB,OAOsDV,mBAAS,IAP/D,mBAOPW,EAPO,KAOqBC,EAPrB,OAQgCZ,mBAAS,GARzC,mBAQPa,EARO,KAQUC,EARV,OAS4Bd,mBAAS,GATrC,mBASPe,EATO,KASQC,EATR,KAqCd,OA1BAC,qBAAU,WACRC,OAAOC,MAAM,kDACVC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAIA,EAAIpB,QAChBmB,MAAK,SAAAnB,GAAI,OAAIA,EAAKsB,QAAO,SAAAC,GAAC,MAAe,QAAXA,EAAEC,WAChCL,MAAK,SAAAnB,GAAI,OAAIA,EAAKyB,MAAK,SAACC,EAAGC,GAAJ,OAAUC,YAAWF,EAAEG,sBAAuBF,EAAEE,6BACvEV,MAAK,SAAAnB,GAAUC,EAAQD,QACzB,IAEHgB,qBAAU,WACRP,EAAyBqB,YAAQ9B,GAAM,SAAA+B,GAAC,OAAIC,YAAID,GAAG,SAAAR,GAAC,OAAIA,EAAEU,aAAS,SAAAV,GAAC,OAAIA,EAAEM,0BAC1EhB,EAAmBmB,YAAIhC,GAAM,SAAAuB,GAAC,OAAIA,EAAEU,aACnC,CAACjC,IAEJgB,qBAAU,WACRL,EAA8BqB,YAAIxB,EAAsB0B,MAAM,EAAGhC,IAAW,SAAAqB,GAAC,OAAIA,EAAE,MAAMrB,KACxF,CAACM,EAAuBN,IAE3Bc,qBAAU,WACR,IAAMmB,GAAQ7B,EAAaC,EAAqBK,GAAmBF,EAC7D0B,EAAW,IAAIjC,KACrBiC,EAASC,QAAQD,EAASE,UAAYC,KAAKC,MAAML,IACjDpB,EAAiBoB,GACjB9B,EAAY+B,KACX,CAAC9B,EAAYC,EAAoBK,EAAiBF,IAGnD,qBAAK+B,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,kDAAqB7B,KACrB,kEAAqC2B,KAAKC,MAAM9B,GAAhD,UAAoFR,EAApF,mBACA,iDAAoBqC,KAAKC,MAAM1B,MAC/B,2CAAcV,EAASsC,oBCnChBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2d769f7f.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport { rollups, sum, descending } from 'd3-array'\nimport './App.css'\n\nfunction App () {\n  const [data, setData] = useState([])\n  const [lastDays, setLastDays] = useState(7)\n  const [lastDate, setLastDate] = useState(new Date())\n  const [population, setPopulation] = useState(6e7)\n  const [populationFraction, setPopulationFraction] = useState(0.8)\n  const [administrationsPerDay, setAdministrationsPerDay] = useState([])\n  const [avgAdministrationsLastDays, setAvgAdministrationsLastDays] = useState([])\n  const [administrations, setAdministrations] = useState(0)\n  const [remainingDays, setRemainingDays] = useState(0)\n\n  useEffect(() => {\n    window.fetch('./somministrazioni-vaccini-summary-latest.json')\n      .then(res => res.json())\n      .then(res => res.data)\n      .then(data => data.filter(d => d.area !== 'ITA'))\n      .then(data => data.sort((a, b) => descending(a.data_somministrazione, b.data_somministrazione)))\n      .then(data => { setData(data) })\n  }, [])\n\n  useEffect(() => {\n    setAdministrationsPerDay(rollups(data, v => sum(v, d => d.totale), d => d.data_somministrazione))\n    setAdministrations(sum(data, d => d.totale))\n  }, [data])\n\n  useEffect(() => {\n    setAvgAdministrationsLastDays(sum(administrationsPerDay.slice(0, lastDays), d => d[1]) / lastDays)\n  }, [administrationsPerDay, lastDays])\n\n  useEffect(() => {\n    const days = (population * populationFraction - administrations) / avgAdministrationsLastDays\n    const datetime = new Date()\n    datetime.setDate(datetime.getDate() + Math.round(days))\n    setRemainingDays(days)\n    setLastDate(datetime)\n  }, [population, populationFraction, administrations, avgAdministrationsLastDays])\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <p>Administrations: {administrations}</p>\n        <p>Average administrations per day: {Math.round(avgAdministrationsLastDays)} (last {lastDays}-days window)</p>\n        <p>Remaining days: {Math.round(remainingDays)}</p>\n        <p>Last day: {lastDate.toString()}</p>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}