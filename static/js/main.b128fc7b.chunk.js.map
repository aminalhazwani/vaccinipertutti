{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","numberLoc","formatLocale","numberItIT","fmtInt","format","fmtPerc","timeLoc","timeFormatLocale","timeItIT","fmtDate","fmtMonthYear","fmtISODate","useState","indexedData","setIndexedData","dataPerArea","setDataPerArea","indexedPopulation","setIndexedPopulation","populationPerArea","setPopulationPerArea","useQueryParam","withDefault","NumberParam","populationFraction","setPopulationFraction","areas","setAreas","StringParam","area","setArea","Date","lastUpdate","setLastUpdate","lastDays","setLastDays","lastDate","setLastDate","doses","setDoses","administrations","setAdministrations","vaccinatedPeople","setVaccinatedPeople","remainingAdministrations","setRemainingAdministrations","remainingDays","setRemainingDays","administrationsPerDay","setAdministrationsPerDay","vaccinatedPeoplePerDay","setVaccinatedPeoplePerDay","avgAdministrationsLastDays","setAvgAdministrationsLastDays","avgVaccinatedPeopleLastDays","setAvgVaccinatedPeopleLastDays","targetMonth","setTargetMonth","getFullYear","targetYear","setTargetYear","targetDate","setTargetDate","targetAvgAdministrationsPerDay","setTargetAvgAdministrationsPerDay","nextMilestone","setNextMilestone","nextMilestoneRemainingDays","setNextMilestoneRemainingDays","nextMilestoneRemainingAdministrations","setNextMilestoneRemainingAdministrations","nextMilestoneTargetAvgAdministrationsPerDay","setNextMilestoneTargetAvgAdministrationsPerDay","isReady","setIsReady","dialogOpen","setDialogOpen","handleOpenDialog","handleCloseDialog","useEffect","Promise","all","window","fetch","then","data","json","ultimo_aggiornamento","sort","a","b","ascending","order","Object","fromEntries","group","d","startDate","filter","endDate","res","descending","data_somministrazione","ITA","Array","from","values","map","reduce","o","v","nome_area","totale","seconda_dose","currentDate","currentMonth","getMonth","rollups","sum","slice","days","datetime","setDate","getDate","Math","round","total","console","log","Container","className","maxWidth","style","opacity","Grid","container","direction","justify","spacing","item","href","onClick","nome","component","target","rel","Select","value","length","onChange","e","MenuItem","toLowerCase","TextField","inputProps","type","min","max","step","InputProps","endAdornment","InputAdornment","position","floor","months","m","i","toLocaleLowerCase","people","p","join","Box","alignContent","xs","Help","color","title","he","decode","encodeURIComponent","location","Twitter","Facebook","LinkedIn","Mail","InsertLink","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","width","src","DialogActions","Button","variant","autoFocus","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createMuiTheme","palette","primary","main","secondary","typography","fontFamily","overrides","MuiInput","root","padding","backgroundColor","MuiInputAdornment","fontSize","MuiDialogActions","justifyContent","marginLeft","ReactDOM","render","ReactRouterRoute","Route","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.b128fc7b.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport he from 'he'\n\nimport {\n  useQueryParam,\n  NumberParam,\n  StringParam,\n  withDefault\n} from 'use-query-params'\n\nimport {\n  TextField,\n  InputAdornment,\n  Select,\n  MenuItem,\n  Container,\n  Grid,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Button,\n  Box\n} from '@material-ui/core'\n\nimport {\n  Facebook,\n  Help,\n  InsertLink,\n  LinkedIn,\n  Mail,\n  Twitter\n} from '@material-ui/icons'\n\nimport { rollups, group, sum, ascending, descending } from 'd3-array'\nimport { formatLocale } from 'd3-format'\nimport { timeFormatLocale } from 'd3-time-format'\nimport numberItIT from 'd3-format/locale/it-IT.json'\nimport timeItIT from 'd3-time-format/locale/it-IT.json'\n\nimport './App.css'\n\nfunction App () {\n  const numberLoc = formatLocale(numberItIT)\n  const fmtInt = numberLoc.format(',d')\n  const fmtPerc = numberLoc.format('.1%')\n\n  const timeLoc = timeFormatLocale(timeItIT)\n  const fmtDate = timeLoc.format('%A %e %B %Y')\n  const fmtMonthYear = timeLoc.format('%B %Y')\n  const fmtISODate = timeLoc.format('%Y-%m-%d')\n\n  // Daily data indexed by area\n  const [indexedData, setIndexedData] = useState({})\n  // Daily data per area\n  const [dataPerArea, setDataPerArea] = useState([])\n\n  // Population indexed by area\n  const [indexedPopulation, setIndexedPopulation] = useState({})\n  // Population per area\n  const [populationPerArea, setPopulationPerArea] = useState(6e7)\n  // Population fraction to be vaccinated (final goal)\n  const [populationFraction, setPopulationFraction] = useQueryParam('populationFraction', withDefault(NumberParam, 0.7))\n\n  // All available area\n  const [areas, setAreas] = useState([])\n  // Selected area\n  const [area, setArea] = useQueryParam('area', withDefault(StringParam, 'ITA'))\n\n  // Last data update\n  const [lastUpdate, setLastUpdate] = useState(new Date())\n  // Width of average time window\n  const [lastDays, setLastDays] = useQueryParam('lastDays', withDefault(NumberParam, 7))\n  // Selected milestone when population fraction will be vaccinated\n  const [lastDate, setLastDate] = useState(new Date())\n\n  // Selected doses per person\n  const [doses, setDoses] = useQueryParam('doses', withDefault(NumberParam, 2))\n\n  // Total number of administrations\n  const [administrations, setAdministrations] = useState(0)\n  // Total number of vaccinations (second dose administrations)\n  const [vaccinatedPeople, setVaccinatedPeople] = useState(0)\n  // Remaining administrations to final goal\n  const [remainingAdministrations, setRemainingAdministrations] = useState(0)\n  // Remaining days to final goal\n  const [remainingDays, setRemainingDays] = useState(0)\n  // Rate of administrations\n  const [administrationsPerDay, setAdministrationsPerDay] = useState([])\n  // Rate of vaccinations (second dose administrations)\n  const [vaccinatedPeoplePerDay, setVaccinatedPeoplePerDay] = useState([])\n  // Average rate of administrations in last days\n  const [avgAdministrationsLastDays, setAvgAdministrationsLastDays] = useState(0)\n  // Average rate of vaccinations in last days\n  const [avgVaccinatedPeopleLastDays, setAvgVaccinatedPeopleLastDays] = useState(0)\n  // Selected final goal month\n  const [targetMonth, setTargetMonth] = useQueryParam('targetMonth', withDefault(NumberParam, 8))\n  // Selected final goal year\n  const [targetYear, setTargetYear] = useQueryParam('targetYear', withDefault(NumberParam, (new Date()).getFullYear()))\n  // Selected final goal date\n  const [targetDate, setTargetDate] = useState(new Date())\n  // Average rate of administrations to reach the final goal within selected date\n  const [targetAvgAdministrationsPerDay, setTargetAvgAdministrationsPerDay] = useState(0)\n\n  // Next milestone\n  const [nextMilestone, setNextMilestone] = useState({})\n  // Remaining days to next milestone\n  const [nextMilestoneRemainingDays, setNextMilestoneRemainingDays] = useState(0)\n  // Remaining administrations to next milestone\n  const [nextMilestoneRemainingAdministrations, setNextMilestoneRemainingAdministrations] = useState(0)\n  // Rate required for the next milestone\n  const [nextMilestoneTargetAvgAdministrationsPerDay, setNextMilestoneTargetAvgAdministrationsPerDay] = useState(0)\n\n  const [isReady, setIsReady] = useState(false)\n  const [dialogOpen, setDialogOpen] = useState(false)\n\n  function handleOpenDialog () {\n    setDialogOpen(true)\n  }\n\n  function handleCloseDialog () {\n    setDialogOpen(false)\n  }\n\n  // Download all requested data on page load\n  useEffect(() => {\n    Promise.all([\n      window.fetch('../vaccinipertutti-data/last-update-dataset.json')\n        .then(data => data.json())\n        .then(data => { setLastUpdate(new Date(data.ultimo_aggiornamento)) }),\n      window.fetch('../vaccinipertutti-data/popolazione_residente_2020.json')\n        .then(data => data.json())\n        .then(data => data.sort((a, b) => ascending(a.order, b.order)))\n        .then(data => {\n          setAreas(data)\n          setIndexedPopulation(Object.fromEntries(group(data, d => d.area)))\n        }),\n      window.fetch('../vaccinipertutti-data/campaign-milestones.json')\n        .then(data => data.json())\n        .then(data => data.sort((a, b) => ascending(a.startDate, b.startDate)))\n        .then(data => data.filter(d => (new Date(d.startDate) < new Date()) && (new Date(d.endDate) > new Date())))\n        .then(data => { setNextMilestone(data?.[0]) }),\n      window.fetch('../vaccinipertutti-data/somministrazioni-vaccini-summary-latest.json')\n        .then(res => res.json())\n        .then(res => res.data)\n        .then(data => data.filter(d => d.area !== 'ITA'))\n        .then(data => data.sort((a, b) => descending(a.data_somministrazione, b.data_somministrazione)))\n        .then(data => {\n          setIndexedData({\n            ITA: Array\n              .from(group(data, d => d.data_somministrazione).values())\n              .map(d => d.reduce(\n                (o, v) => ({\n                  area: 'ITA',\n                  nome_area: 'Italia',\n                  data_somministrazione: v.data_somministrazione,\n                  totale: (o.totale ?? 0) + v.totale,\n                  seconda_dose: (o.seconda_dose ?? 0) + v.seconda_dose\n                }),\n                {})\n              ),\n            ...Object.fromEntries(group(data, d => d.area))\n          })\n        })\n    ]).then(() => { setIsReady(true) })\n  }, [])\n\n  // On user selection of month and year of final goal, compute full date\n  useEffect(() => {\n    const currentDate = new Date()\n    const currentMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0)\n    const selectedMonth = new Date(targetYear, targetMonth + 1, 0)\n\n    // Check to avoid selection of past months\n    if (selectedMonth > currentMonth) {\n      setTargetDate(new Date(targetYear, targetMonth + 1, 0))\n    } else {\n      setTargetMonth(targetDate.getMonth())\n      setTargetYear(targetDate.getFullYear())\n    }\n  }, [targetMonth, targetYear])\n\n  // On user selection of area, update administrations data per area\n  useEffect(() => {\n    setDataPerArea(indexedData[area] || [])\n  }, [indexedData, area])\n\n  // On user selection of area, update population per area\n  useEffect(() => {\n    if (indexedPopulation[area]) {\n      setPopulationPerArea(indexedPopulation[area][0].totale)\n    }\n  }, [indexedPopulation, area])\n\n  useEffect(() => {\n    // Compute partial aggregation (sum of administrations) per day\n    setAdministrationsPerDay(\n      rollups(\n        dataPerArea,\n        v => sum(v, d => d.totale),\n        d => fmtISODate(new Date(d.data_somministrazione))\n      )\n    )\n\n    // Compute partial aggregation (sum of vaccinated people) per day\n    setVaccinatedPeoplePerDay(\n      rollups(\n        dataPerArea,\n        v => sum(v, d => d.seconda_dose),\n        d => fmtISODate(new Date(d.data_somministrazione))\n      )\n    )\n\n    // Update total administrations\n    setAdministrations(\n      sum(dataPerArea, d => d.totale)\n    )\n\n    // Update total vaccinated people\n    setVaccinatedPeople(\n      sum(dataPerArea, d => d.seconda_dose)\n    )\n  }, [dataPerArea])\n\n  // Compute average rate of administrations to reach the final goal within selected date\n  useEffect(() => {\n    setTargetAvgAdministrationsPerDay(remainingAdministrations / (targetDate - (new Date())) * 1000 * 60 * 60 * 24)\n  }, [targetDate, remainingAdministrations])\n\n  // Compute administrations rate in last days, filtering out today administrations to avoid underestimation\n  useEffect(() => {\n    setAvgAdministrationsLastDays(\n      sum(\n        administrationsPerDay.filter(d => d[0] !== fmtISODate(new Date())).slice(0, lastDays),\n        d => d[1]\n      ) / lastDays\n    )\n  }, [administrationsPerDay, lastDays])\n\n  // Compute vaccinated people rate in last days, filtering out today administrations to avoid underestimation\n  useEffect(() => {\n    setAvgVaccinatedPeopleLastDays(\n      sum(\n        vaccinatedPeoplePerDay.filter(d => d[0] !== fmtISODate(new Date())).slice(0, lastDays),\n        d => d[1]\n      ) / lastDays\n    )\n  }, [vaccinatedPeoplePerDay, lastDays])\n\n  // Compute remaining administrations for final goal\n  useEffect(() => {\n    setRemainingAdministrations(\n      doses * populationPerArea * populationFraction - administrations\n    )\n  }, [doses, populationPerArea, populationFraction, administrations])\n\n  // Compute remaining days and date of final goal\n  useEffect(() => {\n    const days = remainingAdministrations / avgAdministrationsLastDays\n    const datetime = new Date()\n    datetime.setDate(datetime.getDate() + Math.round(days))\n    setRemainingDays(days)\n    setLastDate(datetime)\n  }, [remainingAdministrations, avgAdministrationsLastDays])\n\n  // Compute remaining days and administrations for next milestone\n  useEffect(() => {\n    setNextMilestoneRemainingDays((new Date(nextMilestone.endDate) - new Date()) / (1000 * 60 * 60 * 24))\n    setNextMilestoneRemainingAdministrations((doses * nextMilestone.total) - administrations)\n  }, [doses, nextMilestone, administrations])\n\n  // Compute requested average rate of administrations to reach next milestone\n  useEffect(() => {\n    setNextMilestoneTargetAvgAdministrationsPerDay(nextMilestoneRemainingAdministrations / nextMilestoneRemainingDays)\n  }, [nextMilestoneRemainingAdministrations, nextMilestoneRemainingDays])\n\n  console.log(indexedData)\n\n  return (\n    <>\n      <Container className='container' maxWidth='md' style={{ opacity: +isReady }}>\n        <Grid container direction='column' justify='center' spacing={2}>\n          <Grid item className='footerText'>\n            Che cos'è questa pagina? <a href='#' onClick={handleOpenDialog}>Leggi qui!</a>\n          </Grid>\n          <Grid item className='supTitle'>Termine previsto della campagna vaccinale in <em>{indexedPopulation[area]?.[0]?.nome}</em> contro Sars-CoV-2.</Grid>\n          <Grid item component='h1' className='mainTitle'>{fmtDate(lastDate)}</Grid>\n          <Grid item className='footerText'>\n            Come abbiamo calcolato questa data? <a href='https://github.com/ondata/vaccinipertutti/blob/main/README.md#le-stime' target='_blank' rel='noreferrer'>Ecco tutte le info!</a>\n          </Grid>\n          <Grid item className='mainText'>\n            In <Select value={areas.length ? area : ''} onChange={e => setArea(e.target.value)}>{areas.map(a => <MenuItem key={a.area} value={a.area}>{a.nome}</MenuItem>)}</Select> si è iniziato a somministrare il primo vaccino il <em>27 dicembre 2020</em>.\n            A {lastUpdate.getDate() === (new Date()).getDate() ? 'oggi' : 'ieri'}, <em>{fmtDate(lastUpdate).toLowerCase()}</em>, sono state somministrate <em>{fmtInt(administrations)}</em> dosi,\n            ma ne mancano <em>{fmtInt(remainingAdministrations)}</em> per vaccinare il <TextField value={populationFraction * 100} onChange={e => setPopulationFraction(+e.target.value / 100)} inputProps={{ type: 'number', min: 60, max: 100, step: 5 }} InputProps={{ endAdornment: <InputAdornment position='end'>%</InputAdornment> }} /> della popolazione\n            con <TextField value={doses} onChange={e => setDoses(+e.target.value)} inputProps={{ type: 'number', min: 1, max: 2, step: 1 }} /> dosi a testa.\n          </Grid>\n          <Grid item className='mainText'>\n            Al ritmo di <em>{fmtInt(avgAdministrationsLastDays)}</em> somministrazioni al giorno tenuto negli ultimi <TextField value={lastDays} onChange={e => setLastDays(+e.target.value)} inputProps={{ type: 'number', min: 1, max: administrationsPerDay.length, step: 1 }} /> giorni,\n            mancano <em>{fmtInt(Math.floor(remainingDays / 365))} anni, {fmtInt(Math.floor((remainingDays % 365) / 30))} mesi e {fmtInt(Math.floor(remainingDays % 12))} giorni</em> prima di raggiungere l'obiettivo.\n            Per farlo entro <Select value={targetMonth} onChange={e => setTargetMonth(+e.target.value)}>{timeItIT.months.map((m, i) => <MenuItem key={i} value={i}>{m.toLocaleLowerCase()}</MenuItem>)}</Select> <TextField value={targetYear} onChange={e => setTargetYear(+e.target.value)} inputProps={{ type: 'number', min: (new Date()).getFullYear(), max: 2030, step: 1 }} /> bisognerebbe somministrare una media di <em>{fmtInt(targetAvgAdministrationsPerDay)}</em> dosi al giorno.\n          </Grid>\n          <Grid item className='mainText'>\n            Attualmente le persone vaccinate con due dosi sono <em>{fmtInt(vaccinatedPeople)}</em> (una media di <em>{fmtInt(avgVaccinatedPeopleLastDays)}</em> al giorno), pari allo <em>{fmtPerc(vaccinatedPeople / (populationFraction * populationPerArea))}</em> dell'obiettivo di copertura vaccinale della popolazione.\n          </Grid>\n          {\n            area === 'ITA' ? (\n              nextMilestoneTargetAvgAdministrationsPerDay < avgAdministrationsLastDays\n                ? (\n                  <Grid item className='mainText'>\n                    Il ritmo attuale è in linea con il prossimo obiettivo di vaccinare <em>{fmtInt(nextMilestone.total)}</em> persone ({nextMilestone.people?.map(p => p.type).join(', ')}) entro <em>{fmtMonthYear(new Date(nextMilestone.endDate))}</em>.\n                  </Grid>\n                ) : (\n                  <Grid item className='mainText'>\n                    Il ritmo attuale dovrebbe aumentare del <em>{fmtPerc((nextMilestoneTargetAvgAdministrationsPerDay - avgAdministrationsLastDays) / nextMilestoneTargetAvgAdministrationsPerDay)}</em> per raggiungere il prossimo obiettivo di vaccinare <em>{fmtInt(nextMilestone.total)}</em> persone ({nextMilestone.people?.map(p => p.type).join(', ')}) entro <em>{fmtMonthYear(new Date(nextMilestone.endDate))}</em>.\n                  </Grid>\n                )\n              ) : null\n          }\n          <Grid item className='footerText'>\n            Un progetto a cura dell'<a href='https://ondata.it' target='_blank' rel='noreferrer'>Associazione onData</a>.\n          </Grid>\n          <Grid item className='footerText'>\n            Perché l'abbiamo fatto? <a href='https://github.com/ondata/vaccinipertutti/blob/main/README.md#frequently-asked-question-faq' target='_blank' rel='noreferrer'>Scoprilo!</a>\n          </Grid>\n          <Grid item className='footerText'>\n            E se ti piace, sottoscrivi la campagna <a href='https://datibenecomune.it/' target='_blank' rel='noreferrer'>#datiBeneComune</a>!\n          </Grid>\n          <Box className='Flower lt' />\n          <Box className='Flower lb' />\n          <Box className='Cube rt icon'>\n            <Grid container justify='center' alignContent='center' direction='column'>\n              <Grid item xs><Help color='primary' onClick={handleOpenDialog} /></Grid>\n              <Grid item xs><a title='Condividi su Twitter' href={`https://twitter.com/share?text=\"${he.decode(`Termine previsto della campagna vaccinale in ${indexedPopulation[area]?.[0]?.nome} contro Sars-CoV-2: ${fmtDate(lastDate)}`)}\" via @ondatait&hashtags=datiBeneComune&url=${encodeURIComponent(window.location.href)}`} target='_blank' rel='noreferrer'><Twitter color='primary' /></a></Grid>\n              <Grid item xs><a title='Condividi su Facebook' href={`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(window.location.href)}&hashtag=${encodeURIComponent('#datiBeneComune')}`} target='_blank' rel='noreferrer'><Facebook color='primary' /></a></Grid>\n              <Grid item xs><a title='Condividi su LinkedIn' href={`https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(window.location.href)}`} target='_blank' rel='noreferrer'><LinkedIn color='primary' /></a></Grid>\n              <Grid item xs><a title='Condividi via e-mail' href={`mailto:?subject=\"${he.decode(`#datiBeneComune - Termine previsto della campagna vaccinale in ${indexedPopulation[area]?.[0]?.nome} contro Sars-CoV-2: ${fmtDate(lastDate)}`)}\" via onData - APS&body=${he.decode(`In ${indexedPopulation[area]?.[0]?.nome} si è iniziato a somministrare il primo vaccino il 27 dicembre 2020`)}... Continua a leggere su ${encodeURIComponent(window.location.href)}`} target='_blank' rel='noreferrer'><Mail color='primary' /></a></Grid>\n              <Grid item xs><a title='Permalink' href={window.location.href} target='_blank' rel='noreferrer'><InsertLink color='primary' /></a></Grid>\n            </Grid>\n          </Box>\n          <Box className='Flower rb' />\n        </Grid>\n      </Container>\n      <Dialog\n        open={dialogOpen}\n        onClose={handleCloseDialog}\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'\n      >\n        <DialogTitle id='alert-dialog-title'>\"Vaccini per tutti\" by onData</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            \"Vaccini per tutti\" è un'<b>applicazione sperimentale non ufficiale</b> che permette di stimare i tempi di avanzamento della campagna di vaccinazione in Italia sulla base degli open data istituzionali del <a href='https://github.com/italia/covid19-opendata-vaccini/' target='_blank' rel='noreferrer'>Commissario straordinario per l'emergenza Covid-19 - Presidenza del Consiglio dei Ministri</a>, dell'<a href='https://www.epicentro.iss.it/vaccini/covid-19-piano-vaccinazione' target='_blank' rel='noreferrer'>Istituto Superiore di Sanità</a> e di <a href='http://demo.istat.it/popres/index.php?anno=2020&lingua=ita' target='_blank' rel='noreferrer'>ISTAT</a>.\n          </DialogContentText>\n          <DialogContentText>\n            <img width='100%' src='card.png' />\n          </DialogContentText>\n          <DialogContentText>\n            Come funziona? In base all'andamento della campagna di vaccinazione (quante somministrazioni effettuate in Italia nei giorni passati) stimiamo quanto tempo resta per raggiungere gli obiettivi di copertura vaccinale della popolazione generale e di quella dei soggetti ad alta priorità, così come definiti nel <a href='https://www.epicentro.iss.it/vaccini/covid-19-piano-vaccinazione' target='_blank' rel='noreferrer'>piano nazionale di vaccinazione</a>.\n            Puoi modificare i parametri che influiscono sul calcolo, prova a interagire con i numeri su <em className='bg'>sfondo colorato</em> ed esplora tutti gli scenari possibili. Trovi ulteriori dettagli in <a href='https://github.com/ondata/vaccinipertutti/blob/main/README.md#le-stime' target='_blank' rel='noreferrer'>questa pagina</a>.\n          </DialogContentText>\n          <DialogContentText>\n            Per approfondire le motivazioni dietro lo sviluppo di questo lavoro, il significato e i limiti dei dati a disposizione, le modalità di calcolo e l'affidabilità delle stime presentate puoi leggere le nostre <a href='https://github.com/ondata/vaccinipertutti/blob/main/README.md#frequently-asked-question-faq' target='_blank' rel='noreferrer'>FAQ</a> (Frequently Asked Questions).\n          </DialogContentText>\n          <DialogContentText>\n            Se hai un dubbio o vuoi fare una segnalazione, puoi <a href='https://github.com/ondata/vaccinipertutti/issues' target='_blank' rel='noreferrer'>aprire una issue</a>.\n          </DialogContentText>\n          <DialogContentText>\n            Tutte le informazioni contenute in questa pagina sono da prendersi <a href='https://en.wikipedia.org/wiki/As_is' target='_blank' rel='noreferrer'>così come sono</a>, senza nessuna garanzia di correttezza o pretesa di affidabilità.\n            I dati sottostanti sono aggiornati quotidianamente dalle fonti indicate e le stime cambiano quindi ogni giorno seguendo l'andamento della campagna vaccinale.\n          </DialogContentText>\n          <DialogContentText>\n            L'applicazione è sviluppata e mantenuta da <a href='https://github.com/jenkin' target='_blank' rel='noreferrer'>jenkin</a> per <a href='https://ondata.it/' target='_blank' rel='noreferrer'>onData APS</a>, associazione di promozione sociale che promuove l'apertura dei dati pubblici per renderli accessibili a tutte e tutti.\n          </DialogContentText>\n          <DialogContentText>\n            Il codice sorgente è open source e rilasciato sotto <a href='https://tldrlegal.com/license/mit-license' target='_blank' rel='noreferrer'>licenza MIT</a> su Github: <a href='https://github.com/ondata/vaccinipertutti' target='_blank' rel='noreferrer'>ondata/vaccinipertutti</a>. Questa pagina è ospitata dal servizio <a href='https://pages.github.com/' target='_blank' rel='noreferrer'>Github Pages</a> e fa esclusivamente uso di cookie tecnici: non traccia né profila in alcun modo gli utenti.\n          </DialogContentText>\n          <DialogContentText>\n            Puoi sostenere l'attività di onData in molti modi, <a href='https://sostieni.ondata.it/' target='_blank' rel='noreferrer'>dai un'occhiata</a>!\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions justify='flex-start'>\n          <Button color='primary' href='https://datibenecomune.it/' target='_blank' rel='noreferrer'>\n            Sottoscrivi la campagna #datiBeneComune\n          </Button>\n          <Button onClick={handleCloseDialog} color='secondary' variant='contained' autoFocus>\n            Ho capito, grazie!\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { QueryParamProvider } from 'use-query-params'\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\n\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: 'rgba(0, 0, 0, 0.87)'\n    },\n    secondary: {\n      main: '#e82f7d'\n    }\n  },\n  typography: {\n    fontFamily: [\n      '\"Titillium Web\"',\n      'sans-serif'\n    ]\n  },\n  overrides: {\n    MuiInput: {\n      root: {\n        padding: '0 .5em',\n        backgroundColor: '#e82f7d',\n        color: 'white'\n      }\n    },\n    MuiInputAdornment: {\n      root: {\n        '& > *': {\n          color: 'white !important',\n          fontSize: '1.5rem'\n        }\n      }\n    },\n    MuiDialogActions: {\n      root: {\n        justifyContent: 'flex-start',\n        '& > *:last-child': {\n          marginLeft: 'auto !important'\n        }\n      }\n    }\n  }\n})\n\nReactDOM.render(\n  <Router>\n    <QueryParamProvider ReactRouterRoute={Route}>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </QueryParamProvider>\n  </Router>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}