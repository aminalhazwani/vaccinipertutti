{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","fmtInt","formatLocale","numberItIT","format","timeLoc","timeFormatLocale","timeItIT","fmtDate","fmtISODate","useState","indexedData","setIndexedData","data","setData","areas","setAreas","area","setArea","Date","lastUpdate","setLastUpdate","lastDays","setLastDays","lastDate","setLastDate","indexedPopulation","setIndexedPopulation","population","setPopulation","populationFraction","setPopulationFraction","doses","setDoses","administrationsPerDay","setAdministrationsPerDay","avgAdministrationsLastDays","setAvgAdministrationsLastDays","administrations","setAdministrations","remainingAdministrations","setRemainingAdministrations","remainingDays","setRemainingDays","targetMonth","setTargetMonth","getFullYear","targetYear","setTargetYear","targetDate","setTargetDate","targetAvgAdministrationsPerDay","setTargetAvgAdministrationsPerDay","useEffect","window","fetch","then","json","ultimo_aggiornamento","Object","fromEntries","group","d","res","sort","a","b","descending","data_somministrazione","currentDate","currentMonth","getMonth","selectedMonth","console","log","totale","rollups","v","sum","getTime","slice","days","datetime","setDate","getDate","Math","round","className","nome","Select","value","length","onChange","e","target","map","MenuItem","toLowerCase","TextField","size","inputProps","type","min","max","step","InputProps","endAdornment","InputAdornment","position","floor","months","m","i","toLocaleLowerCase","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0c6882a.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\n\nimport {\n  TextField,\n  InputAdornment,\n  Select,\n  MenuItem\n} from '@material-ui/core'\nimport { rollups, group, sum, descending } from 'd3-array'\nimport { formatLocale } from 'd3-format'\nimport { timeFormatLocale } from 'd3-time-format'\nimport numberItIT from 'd3-format/locale/it-IT.json'\nimport timeItIT from 'd3-time-format/locale/it-IT.json'\n\nimport './App.css'\n\nfunction App () {\n  const numberLoc = formatLocale(numberItIT)\n  const fmtInt = numberLoc.format(',d')\n\n  const timeLoc = timeFormatLocale(timeItIT)\n  const fmtDate = timeLoc.format('%A %e %B %Y')\n  const fmtISODate = timeLoc.format('%Y-%M-%d')\n\n  const [indexedData, setIndexedData] = useState({})\n  const [data, setData] = useState([])\n  const [areas, setAreas] = useState([])\n  const [area, setArea] = useState('ITA')\n  const [lastUpdate, setLastUpdate] = useState(new Date())\n  const [lastDays, setLastDays] = useState(7)\n  const [lastDate, setLastDate] = useState(new Date())\n  const [indexedPopulation, setIndexedPopulation] = useState({})\n  const [population, setPopulation] = useState(6e7)\n  const [populationFraction, setPopulationFraction] = useState(0.8)\n  const [doses, setDoses] = useState(2)\n  const [administrationsPerDay, setAdministrationsPerDay] = useState([])\n  const [avgAdministrationsLastDays, setAvgAdministrationsLastDays] = useState([])\n  const [administrations, setAdministrations] = useState(0)\n  const [remainingAdministrations, setRemainingAdministrations] = useState(0)\n  const [remainingDays, setRemainingDays] = useState(0)\n  const [targetMonth, setTargetMonth] = useState(11)\n  const [targetYear, setTargetYear] = useState((new Date()).getFullYear())\n  const [targetDate, setTargetDate] = useState(new Date())\n  const [targetAvgAdministrationsPerDay, setTargetAvgAdministrationsPerDay] = useState(0)\n\n  useEffect(() => {\n    window.fetch('../vaccinipertutti-data/last-update-dataset.json')\n      .then(data => data.json())\n      .then(data => { setLastUpdate(new Date(data.ultimo_aggiornamento)) })\n    window.fetch('../vaccinipertutti-data/popolazione_residente_2020.json')\n      .then(data => data.json())\n      .then(data => {\n        setAreas(data)\n        setIndexedPopulation(Object.fromEntries(group(data, d => d.area)))\n      })\n    window.fetch('../vaccinipertutti-data/somministrazioni-vaccini-summary-latest.json')\n      .then(res => res.json())\n      .then(res => res.data)\n      .then(data => data.sort((a, b) => descending(a.data_somministrazione, b.data_somministrazione)))\n      .then(data => { setIndexedData(Object.fromEntries(group(data, d => d.area))) })\n  }, [])\n\n  useEffect(() => {\n    const currentDate = new Date()\n    const currentMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0)\n    const selectedMonth = new Date(targetYear, targetMonth + 1, 0)\n    console.log(currentMonth, selectedMonth)\n    if (selectedMonth > currentMonth) {\n      setTargetDate(new Date(targetYear, targetMonth + 1, 0))\n    } else {\n      setTargetMonth(targetDate.getMonth())\n      setTargetYear(targetDate.getFullYear())\n    }\n  }, [targetMonth, targetYear])\n\n  useEffect(() => {\n    setData(indexedData[area] || [])\n  }, [indexedData, area])\n\n  useEffect(() => {\n    if (indexedPopulation[area]) {\n      setPopulation(indexedPopulation[area][0].totale)\n    }\n  }, [indexedPopulation, area])\n\n  useEffect(() => {\n    setAdministrationsPerDay(\n      rollups(\n        data,\n        v => sum(v, d => d.totale),\n        d => fmtISODate(new Date(d.data_somministrazione))\n      )\n    )\n\n    setAdministrations(\n      sum(data, d => d.totale)\n    )\n  }, [data])\n\n  useEffect(() => {\n    setTargetAvgAdministrationsPerDay(remainingAdministrations / (targetDate.getTime() - (new Date()).getTime()) * 1000 * 60 * 60 * 24)\n  }, [targetDate, remainingAdministrations])\n\n  useEffect(() => {\n    setAvgAdministrationsLastDays(\n      sum(\n        administrationsPerDay.slice(1, lastDays + 1),\n        d => d[1]\n      ) / lastDays\n    )\n  }, [administrationsPerDay, lastDays])\n\n  useEffect(() => {\n    setRemainingAdministrations(\n      doses * population * populationFraction - administrations\n    )\n  }, [doses, population, populationFraction, administrations])\n\n  useEffect(() => {\n    const days = remainingAdministrations / avgAdministrationsLastDays\n    const datetime = new Date()\n    datetime.setDate(datetime.getDate() + Math.round(days))\n    setRemainingDays(days)\n    setLastDate(datetime)\n  }, [remainingAdministrations, avgAdministrationsLastDays])\n\n  return (\n    <div className='App'>\n      <p>Termine previsto della campagna vaccinale in <em>{indexedPopulation[area]?.[0]?.nome}</em> contro Sars-CoV-2.</p>\n      <h1>{fmtDate(lastDate)}</h1>\n      <div>\n        In <Select value={areas.length ? area : ''} onChange={e => setArea(e.target.value)}>{areas.map(a => <MenuItem key={a.area} value={a.area}>{a.nome}</MenuItem>)}</Select> si è iniziato a somministrare il primo vaccino il <em>27 dicembre 2020</em>.\n        A oggi, <em>{fmtDate(lastUpdate).toLowerCase()}</em>, sono state somministrate <em>{fmtInt(administrations)}</em> dosi,\n        ma ne mancano <em>{fmtInt(remainingAdministrations)}</em> per vaccinare l'<TextField value={populationFraction * 100} onChange={e => setPopulationFraction(+e.target.value / 100)} size='small' inputProps={{ type: 'number', min: 60, max: 100, step: 5 }} InputProps={{ endAdornment: <InputAdornment position='end'>%</InputAdornment> }} /> della popolazione\n        con <TextField value={doses} onChange={e => setDoses(+e.target.value)} size='small' inputProps={{ type: 'number', min: 1, max: 2, step: 1 }} /> dosi a testa.\n        Al ritmo di <em>{fmtInt(avgAdministrationsLastDays)}</em> somministrazioni al giorno tenuto negli ultimi <TextField value={lastDays} onChange={e => setLastDays(+e.target.value)} size='small' inputProps={{ type: 'number', min: 1, max: administrationsPerDay.length, step: 1 }} /> giorni,\n        mancano <em>{Math.floor(remainingDays / 365)} anni, {Math.floor((remainingDays % 365) / 30)} mesi e {Math.floor(remainingDays % 12)} giorni</em> prima di raggiungere <em>l'immunità di gregge</em>.\n        Per ottenerla entro <Select value={targetMonth} onChange={e => setTargetMonth(+e.target.value)}>{timeItIT.months.map((m, i) => <MenuItem key={i} value={i}>{m.toLocaleLowerCase()}</MenuItem>)}</Select> <TextField value={targetYear} onChange={e => setTargetYear(+e.target.value)} size='small' inputProps={{ type: 'number', min: (new Date()).getFullYear(), max: (new Date()).getFullYear() + 10, step: 1 }} /> bisognerebbe somministrare una media di <em>{fmtInt(targetAvgAdministrationsPerDay)}</em> dosi al giorno.\n      </div>\n      <div className='Cube lt' />\n      <div className='Cube lb' />\n      <div className='Cube rt' />\n      <div className='Cube rb' />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}