{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","fmtInt","formatLocale","numberItIT","format","timeLoc","timeFormatLocale","timeItIT","fmtDate","fmtISODate","useState","indexedData","setIndexedData","data","setData","areas","setAreas","useQueryParam","withDefault","StringParam","area","setArea","Date","lastUpdate","setLastUpdate","NumberParam","lastDays","setLastDays","lastDate","setLastDate","indexedPopulation","setIndexedPopulation","population","setPopulation","populationFraction","setPopulationFraction","doses","setDoses","administrationsPerDay","setAdministrationsPerDay","avgAdministrationsLastDays","setAvgAdministrationsLastDays","administrations","setAdministrations","remainingAdministrations","setRemainingAdministrations","remainingDays","setRemainingDays","targetMonth","setTargetMonth","getFullYear","targetYear","setTargetYear","targetDate","setTargetDate","targetAvgAdministrationsPerDay","setTargetAvgAdministrationsPerDay","dialogOpen","setDialogOpen","handleCloseDialog","useEffect","window","fetch","then","json","ultimo_aggiornamento","sort","a","b","ascending","order","Object","fromEntries","group","d","res","descending","data_somministrazione","currentDate","currentMonth","getMonth","selectedMonth","console","log","totale","rollups","v","sum","getTime","slice","days","datetime","setDate","getDate","Math","round","Container","className","maxWidth","style","opacity","length","Grid","container","direction","justify","spacing","item","nome","component","Select","value","onChange","e","target","map","MenuItem","toLowerCase","TextField","size","inputProps","type","min","max","step","InputProps","endAdornment","InputAdornment","position","floor","months","m","i","toLocaleLowerCase","href","rel","Box","Help","color","onClick","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","autoFocus","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createMuiTheme","palette","secondary","main","typography","fontFamily","ReactDOM","render","ReactRouterRoute","Route","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.25e671da.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\n\nimport {\n  useQueryParam,\n  NumberParam,\n  StringParam,\n  withDefault\n} from 'use-query-params'\n\nimport {\n  TextField,\n  InputAdornment,\n  Select,\n  MenuItem,\n  Container,\n  Grid,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Button,\n  Box,\n  Typography\n} from '@material-ui/core'\n\nimport { Help } from '@material-ui/icons'\n\nimport { rollups, group, sum, ascending, descending } from 'd3-array'\nimport { formatLocale } from 'd3-format'\nimport { timeFormatLocale } from 'd3-time-format'\nimport numberItIT from 'd3-format/locale/it-IT.json'\nimport timeItIT from 'd3-time-format/locale/it-IT.json'\n\nimport './App.css'\n\nfunction App () {\n  const numberLoc = formatLocale(numberItIT)\n  const fmtInt = numberLoc.format(',d')\n\n  const timeLoc = timeFormatLocale(timeItIT)\n  const fmtDate = timeLoc.format('%A %e %B %Y')\n  const fmtISODate = timeLoc.format('%Y-%M-%d')\n\n  const [indexedData, setIndexedData] = useState({})\n  const [data, setData] = useState([])\n  const [areas, setAreas] = useState([])\n  const [area, setArea] = useQueryParam('area', withDefault(StringParam, 'ITA'))\n  const [lastUpdate, setLastUpdate] = useState(new Date())\n  const [lastDays, setLastDays] = useQueryParam('lastDays', withDefault(NumberParam, 7))\n  const [lastDate, setLastDate] = useState(new Date())\n  const [indexedPopulation, setIndexedPopulation] = useState({})\n  const [population, setPopulation] = useState(6e7)\n  const [populationFraction, setPopulationFraction] = useQueryParam('populationFraction', withDefault(NumberParam, 0.7))\n  const [doses, setDoses] = useQueryParam('doses', withDefault(NumberParam, 2))\n  const [administrationsPerDay, setAdministrationsPerDay] = useState([])\n  const [avgAdministrationsLastDays, setAvgAdministrationsLastDays] = useState([])\n  const [administrations, setAdministrations] = useState(0)\n  const [remainingAdministrations, setRemainingAdministrations] = useState(0)\n  const [remainingDays, setRemainingDays] = useState(0)\n  const [targetMonth, setTargetMonth] = useQueryParam('targetMonth', withDefault(NumberParam, 8))\n  const [targetYear, setTargetYear] = useQueryParam('targetYear', withDefault(NumberParam, (new Date()).getFullYear()))\n  const [targetDate, setTargetDate] = useState(new Date())\n  const [targetAvgAdministrationsPerDay, setTargetAvgAdministrationsPerDay] = useState(0)\n  const [dialogOpen, setDialogOpen] = useState(false)\n\n  function handleOpenDialog () {\n    setDialogOpen(true)\n  }\n\n  function handleCloseDialog () {\n    setDialogOpen(false)\n  }\n\n  useEffect(() => {\n    window.fetch('../vaccinipertutti-data/last-update-dataset.json')\n      .then(data => data.json())\n      .then(data => { setLastUpdate(new Date(data.ultimo_aggiornamento)) })\n    window.fetch('../vaccinipertutti-data/popolazione_residente_2020.json')\n      .then(data => data.json())\n      .then(data => data.sort((a, b) => ascending(a.order, b.order)))\n      .then(data => {\n        setAreas(data)\n        setIndexedPopulation(Object.fromEntries(group(data, d => d.area)))\n      })\n    window.fetch('../vaccinipertutti-data/somministrazioni-vaccini-summary-latest.json')\n      .then(res => res.json())\n      .then(res => res.data)\n      .then(data => data.sort((a, b) => descending(a.data_somministrazione, b.data_somministrazione)))\n      .then(data => {\n        setIndexedData(Object.fromEntries(group(data, d => d.area)))\n      })\n  }, [])\n\n  useEffect(() => {\n    const currentDate = new Date()\n    const currentMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0)\n    const selectedMonth = new Date(targetYear, targetMonth + 1, 0)\n    console.log(currentMonth, selectedMonth)\n    if (selectedMonth > currentMonth) {\n      setTargetDate(new Date(targetYear, targetMonth + 1, 0))\n    } else {\n      setTargetMonth(targetDate.getMonth())\n      setTargetYear(targetDate.getFullYear())\n    }\n  }, [targetMonth, targetYear])\n\n  useEffect(() => {\n    setData(indexedData[area] || [])\n  }, [indexedData, area])\n\n  useEffect(() => {\n    if (indexedPopulation[area]) {\n      setPopulation(indexedPopulation[area][0].totale)\n    }\n  }, [indexedPopulation, area])\n\n  useEffect(() => {\n    setAdministrationsPerDay(\n      rollups(\n        data,\n        v => sum(v, d => d.totale),\n        d => fmtISODate(new Date(d.data_somministrazione))\n      )\n    )\n\n    setAdministrations(\n      sum(data, d => d.totale)\n    )\n  }, [data])\n\n  useEffect(() => {\n    setTargetAvgAdministrationsPerDay(remainingAdministrations / (targetDate.getTime() - (new Date()).getTime()) * 1000 * 60 * 60 * 24)\n  }, [targetDate, remainingAdministrations])\n\n  useEffect(() => {\n    setAvgAdministrationsLastDays(\n      sum(\n        administrationsPerDay.slice(1, lastDays + 1),\n        d => d[1]\n      ) / lastDays\n    )\n  }, [administrationsPerDay, lastDays])\n\n  useEffect(() => {\n    setRemainingAdministrations(\n      doses * population * populationFraction - administrations\n    )\n  }, [doses, population, populationFraction, administrations])\n\n  useEffect(() => {\n    const days = remainingAdministrations / avgAdministrationsLastDays\n    const datetime = new Date()\n    datetime.setDate(datetime.getDate() + Math.round(days))\n    setRemainingDays(days)\n    setLastDate(datetime)\n  }, [remainingAdministrations, avgAdministrationsLastDays])\n\n  return (\n    <>\n      <Container className='container' maxWidth='md' style={{ opacity: +!!data.length }}>\n        <Grid container direction='column' justify='center' spacing={2}>\n          <Grid item className='supTitle'>Termine previsto della campagna vaccinale in <em>{indexedPopulation[area]?.[0]?.nome}</em> contro Sars-CoV-2.</Grid>\n          <Grid item component='h1' className='mainTitle'>{fmtDate(lastDate)}</Grid>\n          <Grid item className='mainText'>\n            In <Select value={areas.length ? area : ''} onChange={e => setArea(e.target.value)}>{areas.map(a => <MenuItem key={a.area} value={a.area}>{a.nome}</MenuItem>)}</Select> si è iniziato a somministrare il primo vaccino il <em>27 dicembre 2020</em>.\n            A oggi, <em>{fmtDate(lastUpdate).toLowerCase()}</em>, sono state somministrate <em>{fmtInt(administrations)}</em> dosi,\n            ma ne mancano <em>{fmtInt(remainingAdministrations)}</em> per vaccinare il <TextField value={populationFraction * 100} onChange={e => setPopulationFraction(+e.target.value / 100)} size='small' inputProps={{ type: 'number', min: 60, max: 100, step: 5 }} InputProps={{ endAdornment: <InputAdornment position='end'>%</InputAdornment> }} /> della popolazione\n            con <TextField value={doses} onChange={e => setDoses(+e.target.value)} size='small' inputProps={{ type: 'number', min: 1, max: 2, step: 1 }} /> dosi a testa.\n          </Grid>\n          <Grid item className='mainText'>\n            Al ritmo di <em>{fmtInt(avgAdministrationsLastDays)}</em> somministrazioni al giorno tenuto negli ultimi <TextField value={lastDays} onChange={e => setLastDays(+e.target.value)} size='small' inputProps={{ type: 'number', min: 1, max: administrationsPerDay.length, step: 1 }} /> giorni,\n            mancano <em>{Math.floor(remainingDays / 365)} anni, {Math.floor((remainingDays % 365) / 30)} mesi e {Math.floor(remainingDays % 12)} giorni</em> prima di raggiungere <em>l'immunità di gregge</em>.\n          </Grid>\n          <Grid item className='mainText'>\n            Per ottenerla entro <Select value={targetMonth} onChange={e => setTargetMonth(+e.target.value)}>{timeItIT.months.map((m, i) => <MenuItem key={i} value={i}>{m.toLocaleLowerCase()}</MenuItem>)}</Select> <TextField value={targetYear} onChange={e => setTargetYear(+e.target.value)} size='small' inputProps={{ type: 'number', min: (new Date()).getFullYear(), max: (new Date()).getFullYear() + 10, step: 1 }} /> bisognerebbe somministrare una media di <em>{fmtInt(targetAvgAdministrationsPerDay)}</em> dosi al giorno.\n          </Grid>\n          <Grid item className='footerText'>\n            Un progetto a cura dell'<a href='https://ondata.it' target='_blank' rel='noreferrer'>Associazione onData</a>\n          </Grid>\n          <Box className='Flower lt' />\n          <Box className='Flower lb' />\n          <Box className='Cube rt icon'>\n            <Help color='primary' onClick={handleOpenDialog} />\n          </Box>\n          <Box className='Flower rb' />\n        </Grid>\n      </Container>\n      <Dialog\n        open={dialogOpen}\n        onClose={handleCloseDialog}\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'\n      >\n        <DialogTitle id='alert-dialog-title'>\"Vaccini per tutti\" by onData</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            \"Vaccini per tutti\" è un esperimento che permette di stimare i tempi di avanzamento della campagna di vaccinazione in Italia sulla base degli open data ufficiali del <a href='https://github.com/italia/covid19-opendata-vaccini/' target='_blank' rel='noreferrer'>Commissario straordinario per l'emergenza Covid-19 - Presidenza del Consiglio dei Ministri</a> e di <a href='http://demo.istat.it/popres/index.php?anno=2020&lingua=ita' target='_blank' rel='noreferrer'>ISTAT</a>.\n          </DialogContentText>\n          <DialogContentText>\n            L'applicazione è sviluppata e mantenuta da <a href='https://github.com/jenkin' target='_blank' rel='noreferrer'>@jenkin</a> per <a href='https://ondata.it/' target='_blank' rel='noreferrer'>onData APS</a>, associazione di promozione sociale che promuove l'apertura dei dati pubblici per renderli accessibili a tutte e tutti.\n          </DialogContentText>\n          <DialogContentText>\n            Il codice sorgente è open source e rilasciato sotto licenza MIT su Github: <a href='https://github.com/ondata/vaccinipertutti' target='_blank' rel='noreferrer'>ondata/vaccinipertutti</a>. Questa pagina è ospitata dal servizio <a href='https://pages.github.com/' target='_blank' rel='noreferrer'>Github Pages</a> e fa esclusivamente uso di cookie tecnici: non traccia né profila in alcun modo gli utenti. Se vuoi fare una segnalazione, puoi <a href='https://github.com/ondata/vaccinipertutti/issues' target='_blank' rel='noreferrer'>aprire una issue</a>.\n          </DialogContentText>\n          <DialogContentText>\n            Puoi sostenere l'attività di onData in molti modi, <a href='https://sostieni.ondata.it/' target='_blank' rel='noreferrer'>dai un'occhiata</a>!\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseDialog} color='secondary' autoFocus>\n            Ho capito, grazie!\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { QueryParamProvider } from 'use-query-params'\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\n\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nconst theme = createMuiTheme({\n  palette: {\n    secondary: {\n      main: '#e82f7d'\n    }\n  },\n  typography: {\n    fontFamily: [\n      '\"Titillium Web\"',\n      'sans-serif'\n    ]\n  }\n})\n\nReactDOM.render(\n  <Router>\n    <QueryParamProvider ReactRouterRoute={Route}>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </QueryParamProvider>\n  </Router>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}