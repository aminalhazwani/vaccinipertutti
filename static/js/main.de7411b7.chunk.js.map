{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","fmtInt","formatLocale","numberItIT","format","timeLoc","timeFormatLocale","timeItIT","fmtDate","fmtISODate","useState","indexedData","setIndexedData","data","setData","areas","setAreas","useQueryParam","withDefault","StringParam","area","setArea","Date","lastUpdate","setLastUpdate","NumberParam","lastDays","setLastDays","lastDate","setLastDate","indexedPopulation","setIndexedPopulation","population","setPopulation","populationFraction","setPopulationFraction","doses","setDoses","administrationsPerDay","setAdministrationsPerDay","avgAdministrationsLastDays","setAvgAdministrationsLastDays","administrations","setAdministrations","remainingAdministrations","setRemainingAdministrations","remainingDays","setRemainingDays","targetMonth","setTargetMonth","getFullYear","targetYear","setTargetYear","targetDate","setTargetDate","targetAvgAdministrationsPerDay","setTargetAvgAdministrationsPerDay","dialogOpen","setDialogOpen","handleCloseDialog","useEffect","window","fetch","then","json","ultimo_aggiornamento","Object","fromEntries","group","d","res","sort","a","b","descending","data_somministrazione","currentDate","currentMonth","getMonth","selectedMonth","console","log","totale","rollups","v","sum","getTime","slice","days","datetime","setDate","getDate","Math","round","Container","maxWidth","Grid","container","direction","justify","spacing","item","nome","component","Select","value","length","onChange","e","target","map","MenuItem","toLowerCase","TextField","size","inputProps","type","min","max","step","InputProps","endAdornment","InputAdornment","position","floor","months","m","i","toLocaleLowerCase","Box","className","Help","color","onClick","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","autoFocus","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createMuiTheme","palette","secondary","main","typography","fontFamily","ReactDOM","render","ReactRouterRoute","Route","ThemeProvider","document","getElementById"],"mappings":"scAwMeA,MApKf,WAAiB,IAAD,IAERC,EADYC,YAAaC,GACNC,OAAO,MAE1BC,EAAUC,YAAiBC,GAC3BC,EAAUH,EAAQD,OAAO,eACzBK,EAAaJ,EAAQD,OAAO,YANpB,EAQwBM,mBAAS,IARjC,mBAQPC,EARO,KAQMC,EARN,OASUF,mBAAS,IATnB,mBASPG,EATO,KASDC,EATC,OAUYJ,mBAAS,IAVrB,mBAUPK,EAVO,KAUAC,EAVA,OAWUC,YAAc,OAAQC,YAAYC,IAAa,QAXzD,mBAWPC,EAXO,KAWDC,EAXC,OAYsBX,mBAAS,IAAIY,MAZnC,mBAYPC,EAZO,KAYKC,EAZL,OAakBP,YAAc,WAAYC,YAAYO,IAAa,IAbrE,mBAaPC,EAbO,KAaGC,GAbH,QAckBjB,mBAAS,IAAIY,MAd/B,qBAcPM,GAdO,MAcGC,GAdH,SAeoCnB,mBAAS,IAf7C,qBAePoB,GAfO,MAeYC,GAfZ,SAgBsBrB,mBAAS,KAhB/B,qBAgBPsB,GAhBO,MAgBKC,GAhBL,SAiBsChB,YAAc,qBAAsBC,YAAYO,IAAa,KAjBnG,qBAiBPS,GAjBO,MAiBaC,GAjBb,SAkBYlB,YAAc,QAASC,YAAYO,IAAa,IAlB5D,qBAkBPW,GAlBO,MAkBAC,GAlBA,SAmB4C3B,mBAAS,IAnBrD,qBAmBP4B,GAnBO,MAmBgBC,GAnBhB,SAoBsD7B,mBAAS,IApB/D,qBAoBP8B,GApBO,MAoBqBC,GApBrB,SAqBgC/B,mBAAS,GArBzC,qBAqBPgC,GArBO,MAqBUC,GArBV,SAsBkDjC,mBAAS,GAtB3D,qBAsBPkC,GAtBO,MAsBmBC,GAtBnB,SAuB4BnC,mBAAS,GAvBrC,qBAuBPoC,GAvBO,MAuBQC,GAvBR,SAwBwB9B,YAAc,cAAeC,YAAYO,IAAa,KAxB9E,qBAwBPuB,GAxBO,MAwBMC,GAxBN,SAyBsBhC,YAAc,aAAcC,YAAYO,KAAc,IAAIH,MAAQ4B,gBAzBxF,qBAyBPC,GAzBO,MAyBKC,GAzBL,SA0BsB1C,mBAAS,IAAIY,MA1BnC,qBA0BP+B,GA1BO,MA0BKC,GA1BL,SA2B8D5C,mBAAS,GA3BvE,qBA2BP6C,GA3BO,MA2ByBC,GA3BzB,SA4BsB9C,oBAAS,GA5B/B,qBA4BP+C,GA5BO,MA4BKC,GA5BL,MAkCd,SAASC,KACPD,IAAc,GAoFhB,OAjFAE,qBAAU,WACRC,OAAOC,MAAM,oDACVC,MAAK,SAAAlD,GAAI,OAAIA,EAAKmD,UAClBD,MAAK,SAAAlD,GAAUW,EAAc,IAAIF,KAAKT,EAAKoD,0BAC9CJ,OAAOC,MAAM,2DACVC,MAAK,SAAAlD,GAAI,OAAIA,EAAKmD,UAClBD,MAAK,SAAAlD,GACJG,EAASH,GACTkB,GAAqBmC,OAAOC,YAAYC,YAAMvD,GAAM,SAAAwD,GAAC,OAAIA,EAAEjD,aAE/DyC,OAAOC,MAAM,wEACVC,MAAK,SAAAO,GAAG,OAAIA,EAAIN,UAChBD,MAAK,SAAAO,GAAG,OAAIA,EAAIzD,QAChBkD,MAAK,SAAAlD,GAAI,OAAIA,EAAK0D,MAAK,SAACC,EAAGC,GAAJ,OAAUC,YAAWF,EAAEG,sBAAuBF,EAAEE,6BACvEZ,MAAK,SAAAlD,GAAUD,EAAesD,OAAOC,YAAYC,YAAMvD,GAAM,SAAAwD,GAAC,OAAIA,EAAEjD,eACtE,IAEHwC,qBAAU,WACR,IAAMgB,EAAc,IAAItD,KAClBuD,EAAe,IAAIvD,KAAKsD,EAAY1B,cAAe0B,EAAYE,WAAa,EAAG,GAC/EC,EAAgB,IAAIzD,KAAK6B,GAAYH,GAAc,EAAG,GAC5DgC,QAAQC,IAAIJ,EAAcE,GACtBA,EAAgBF,EAClBvB,GAAc,IAAIhC,KAAK6B,GAAYH,GAAc,EAAG,KAEpDC,GAAeI,GAAWyB,YAC1B1B,GAAcC,GAAWH,kBAE1B,CAACF,GAAaG,KAEjBS,qBAAU,WACR9C,EAAQH,EAAYS,IAAS,MAC5B,CAACT,EAAaS,IAEjBwC,qBAAU,WACJ9B,GAAkBV,IACpBa,GAAcH,GAAkBV,GAAM,GAAG8D,UAE1C,CAACpD,GAAmBV,IAEvBwC,qBAAU,WACRrB,GACE4C,YACEtE,GACA,SAAAuE,GAAC,OAAIC,YAAID,GAAG,SAAAf,GAAC,OAAIA,EAAEa,aACnB,SAAAb,GAAC,OAAI5D,EAAW,IAAIa,KAAK+C,EAAEM,4BAI/BhC,GACE0C,YAAIxE,GAAM,SAAAwD,GAAC,OAAIA,EAAEa,aAElB,CAACrE,IAEJ+C,qBAAU,WACRJ,GAAkCZ,IAA4BS,GAAWiC,WAAa,IAAIhE,MAAQgE,WAAa,IAAO,GAAK,GAAK,MAC/H,CAACjC,GAAYT,KAEhBgB,qBAAU,WACRnB,GACE4C,YACE/C,GAAsBiD,MAAM,EAAG7D,EAAW,IAC1C,SAAA2C,GAAC,OAAIA,EAAE,MACL3C,KAEL,CAACY,GAAuBZ,IAE3BkC,qBAAU,WACRf,GACET,GAAQJ,GAAaE,GAAqBQ,MAE3C,CAACN,GAAOJ,GAAYE,GAAoBQ,KAE3CkB,qBAAU,WACR,IAAM4B,EAAO5C,GAA2BJ,GAClCiD,EAAW,IAAInE,KACrBmE,EAASC,QAAQD,EAASE,UAAYC,KAAKC,MAAML,IACjDzC,GAAiByC,GACjB3D,GAAY4D,KACX,CAAC7C,GAA0BJ,KAG5B,qCACE,cAACsD,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,QAAQ,SAASC,QAAS,EAA7D,UACE,eAACJ,EAAA,EAAD,CAAMK,MAAI,EAAV,0DAAwD,uCAAKvE,GAAkBV,UAAvB,iBAAK,EAA0B,UAA/B,aAAK,EAA8BkF,OAA3F,yBACA,cAACN,EAAA,EAAD,CAAMK,MAAI,EAACE,UAAU,KAArB,SAA2B/F,EAAQoB,MACnC,eAACoE,EAAA,EAAD,CAAMK,MAAI,EAAV,gBACK,cAACG,EAAA,EAAD,CAAQC,MAAO1F,EAAM2F,OAAStF,EAAO,GAAIuF,SAAU,SAAAC,GAAC,OAAIvF,EAAQuF,EAAEC,OAAOJ,QAAzE,SAAkF1F,EAAM+F,KAAI,SAAAtC,GAAC,OAAI,cAACuC,EAAA,EAAD,CAAuBN,MAAOjC,EAAEpD,KAAhC,SAAuCoD,EAAE8B,MAA1B9B,EAAEpD,WADvH,yDAC6N,kDAD7N,aAEU,6BAAKZ,EAAQe,GAAYyF,gBAFnC,8BAEiF,6BAAK/G,EAAOyC,MAF7F,wBAGgB,6BAAKzC,EAAO2C,MAH5B,oBAG4E,cAACqE,EAAA,EAAD,CAAWR,MAA4B,IAArBvE,GAA0ByE,SAAU,SAAAC,GAAC,OAAIzE,IAAuByE,EAAEC,OAAOJ,MAAQ,MAAMS,KAAK,QAAQC,WAAY,CAAEC,KAAM,SAAUC,IAAK,GAAIC,IAAK,IAAKC,KAAM,GAAKC,WAAY,CAAEC,aAAc,cAACC,EAAA,EAAD,CAAgBC,SAAS,MAAzB,kBAH1R,0BAIM,cAACV,EAAA,EAAD,CAAWR,MAAOrE,GAAOuE,SAAU,SAAAC,GAAC,OAAIvE,IAAUuE,EAAEC,OAAOJ,QAAQS,KAAK,QAAQC,WAAY,CAAEC,KAAM,SAAUC,IAAK,EAAGC,IAAK,EAAGC,KAAM,KAJ1I,8BAKc,6BAAKtH,EAAOuC,MAL1B,mDAK2G,cAACyE,EAAA,EAAD,CAAWR,MAAO/E,EAAUiF,SAAU,SAAAC,GAAC,OAAIjF,IAAaiF,EAAEC,OAAOJ,QAAQS,KAAK,QAAQC,WAAY,CAAEC,KAAM,SAAUC,IAAK,EAAGC,IAAKhF,GAAsBoE,OAAQa,KAAM,KALhR,oBAMU,+BAAK3B,KAAKgC,MAAM9E,GAAgB,KAAhC,UAA6C8C,KAAKgC,MAAO9E,GAAgB,IAAO,IAAhF,WAA6F8C,KAAKgC,MAAM9E,GAAgB,IAAxH,aANV,yBAMwK,yDANxK,yBAOsB,cAAC0D,EAAA,EAAD,CAAQC,MAAOzD,GAAa2D,SAAU,SAAAC,GAAC,OAAI3D,IAAgB2D,EAAEC,OAAOJ,QAApE,SAA6ElG,EAASsH,OAAOf,KAAI,SAACgB,EAAGC,GAAJ,OAAU,cAAChB,EAAA,EAAD,CAAkBN,MAAOsB,EAAzB,SAA6BD,EAAEE,qBAAhBD,QAPhJ,IAO2M,cAACd,EAAA,EAAD,CAAWR,MAAOtD,GAAYwD,SAAU,SAAAC,GAAC,OAAIxD,IAAewD,EAAEC,OAAOJ,QAAQS,KAAK,QAAQC,WAAY,CAAEC,KAAM,SAAUC,KAAM,IAAI/F,MAAQ4B,cAAeoE,KAAM,IAAIhG,MAAQ4B,cAAgB,GAAIqE,KAAM,KAPhZ,4CAOgc,6BAAKtH,EAAOsD,MAP5c,sBASA,cAAC0E,EAAA,EAAD,CAAKC,UAAU,cACf,cAACD,EAAA,EAAD,CAAKC,UAAU,cACf,cAACD,EAAA,EAAD,CAAKC,UAAU,eAAf,SACE,cAACC,EAAA,EAAD,CAAMC,MAAM,UAAUC,QA3GhC,WACE3E,IAAc,QA4GR,cAACuE,EAAA,EAAD,CAAKC,UAAU,mBAGnB,eAACI,EAAA,EAAD,CACEC,KAAM9E,GACN+E,QAAS7E,GACT8E,kBAAgB,qBAChBC,mBAAiB,2BAJnB,UAME,cAACC,EAAA,EAAD,CAAaC,GAAG,qBAAhB,yCACA,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAmBF,GAAG,2BAAtB,sDAIF,cAACG,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQX,QAAS1E,GAAmByE,MAAM,YAAYa,WAAS,EAA/D,0BCnLKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrF,MAAK,YAAkD,IAA/CsF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCIRO,EAAQC,YAAe,CAC3BC,QAAS,CACPC,UAAW,CACTC,KAAM,YAGVC,WAAY,CACVC,WAAY,CACV,kBACA,iBAKNC,IAASC,OACP,cAAC,IAAD,UACE,cAAC,IAAD,CAAoBC,iBAAkBC,IAAtC,SACE,cAACC,EAAA,EAAD,CAAeX,MAAOA,EAAtB,SACE,cAAC,EAAD,UAINY,SAASC,eAAe,SAM1BrB,M","file":"static/js/main.de7411b7.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\n\nimport {\n  useQueryParam,\n  NumberParam,\n  StringParam,\n  withDefault\n} from 'use-query-params'\n\nimport {\n  TextField,\n  InputAdornment,\n  Select,\n  MenuItem,\n  Container,\n  Grid,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Button,\n  Box,\n  IconButton\n} from '@material-ui/core'\n\nimport { Help } from '@material-ui/icons'\n\nimport { rollups, group, sum, descending } from 'd3-array'\nimport { formatLocale } from 'd3-format'\nimport { timeFormatLocale } from 'd3-time-format'\nimport numberItIT from 'd3-format/locale/it-IT.json'\nimport timeItIT from 'd3-time-format/locale/it-IT.json'\n\nimport './App.css'\n\nfunction App () {\n  const numberLoc = formatLocale(numberItIT)\n  const fmtInt = numberLoc.format(',d')\n\n  const timeLoc = timeFormatLocale(timeItIT)\n  const fmtDate = timeLoc.format('%A %e %B %Y')\n  const fmtISODate = timeLoc.format('%Y-%M-%d')\n\n  const [indexedData, setIndexedData] = useState({})\n  const [data, setData] = useState([])\n  const [areas, setAreas] = useState([])\n  const [area, setArea] = useQueryParam('area', withDefault(StringParam, 'ITA'))\n  const [lastUpdate, setLastUpdate] = useState(new Date())\n  const [lastDays, setLastDays] = useQueryParam('lastDays', withDefault(NumberParam, 7))\n  const [lastDate, setLastDate] = useState(new Date())\n  const [indexedPopulation, setIndexedPopulation] = useState({})\n  const [population, setPopulation] = useState(6e7)\n  const [populationFraction, setPopulationFraction] = useQueryParam('populationFraction', withDefault(NumberParam, 0.8))\n  const [doses, setDoses] = useQueryParam('doses', withDefault(NumberParam, 2))\n  const [administrationsPerDay, setAdministrationsPerDay] = useState([])\n  const [avgAdministrationsLastDays, setAvgAdministrationsLastDays] = useState([])\n  const [administrations, setAdministrations] = useState(0)\n  const [remainingAdministrations, setRemainingAdministrations] = useState(0)\n  const [remainingDays, setRemainingDays] = useState(0)\n  const [targetMonth, setTargetMonth] = useQueryParam('targetMonth', withDefault(NumberParam, 11))\n  const [targetYear, setTargetYear] = useQueryParam('targetYear', withDefault(NumberParam, (new Date()).getFullYear()))\n  const [targetDate, setTargetDate] = useState(new Date())\n  const [targetAvgAdministrationsPerDay, setTargetAvgAdministrationsPerDay] = useState(0)\n  const [dialogOpen, setDialogOpen] = useState(false)\n\n  function handleOpenDialog () {\n    setDialogOpen(true)\n  }\n\n  function handleCloseDialog () {\n    setDialogOpen(false)\n  }\n\n  useEffect(() => {\n    window.fetch('../vaccinipertutti-data/last-update-dataset.json')\n      .then(data => data.json())\n      .then(data => { setLastUpdate(new Date(data.ultimo_aggiornamento)) })\n    window.fetch('../vaccinipertutti-data/popolazione_residente_2020.json')\n      .then(data => data.json())\n      .then(data => {\n        setAreas(data)\n        setIndexedPopulation(Object.fromEntries(group(data, d => d.area)))\n      })\n    window.fetch('../vaccinipertutti-data/somministrazioni-vaccini-summary-latest.json')\n      .then(res => res.json())\n      .then(res => res.data)\n      .then(data => data.sort((a, b) => descending(a.data_somministrazione, b.data_somministrazione)))\n      .then(data => { setIndexedData(Object.fromEntries(group(data, d => d.area))) })\n  }, [])\n\n  useEffect(() => {\n    const currentDate = new Date()\n    const currentMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0)\n    const selectedMonth = new Date(targetYear, targetMonth + 1, 0)\n    console.log(currentMonth, selectedMonth)\n    if (selectedMonth > currentMonth) {\n      setTargetDate(new Date(targetYear, targetMonth + 1, 0))\n    } else {\n      setTargetMonth(targetDate.getMonth())\n      setTargetYear(targetDate.getFullYear())\n    }\n  }, [targetMonth, targetYear])\n\n  useEffect(() => {\n    setData(indexedData[area] || [])\n  }, [indexedData, area])\n\n  useEffect(() => {\n    if (indexedPopulation[area]) {\n      setPopulation(indexedPopulation[area][0].totale)\n    }\n  }, [indexedPopulation, area])\n\n  useEffect(() => {\n    setAdministrationsPerDay(\n      rollups(\n        data,\n        v => sum(v, d => d.totale),\n        d => fmtISODate(new Date(d.data_somministrazione))\n      )\n    )\n\n    setAdministrations(\n      sum(data, d => d.totale)\n    )\n  }, [data])\n\n  useEffect(() => {\n    setTargetAvgAdministrationsPerDay(remainingAdministrations / (targetDate.getTime() - (new Date()).getTime()) * 1000 * 60 * 60 * 24)\n  }, [targetDate, remainingAdministrations])\n\n  useEffect(() => {\n    setAvgAdministrationsLastDays(\n      sum(\n        administrationsPerDay.slice(1, lastDays + 1),\n        d => d[1]\n      ) / lastDays\n    )\n  }, [administrationsPerDay, lastDays])\n\n  useEffect(() => {\n    setRemainingAdministrations(\n      doses * population * populationFraction - administrations\n    )\n  }, [doses, population, populationFraction, administrations])\n\n  useEffect(() => {\n    const days = remainingAdministrations / avgAdministrationsLastDays\n    const datetime = new Date()\n    datetime.setDate(datetime.getDate() + Math.round(days))\n    setRemainingDays(days)\n    setLastDate(datetime)\n  }, [remainingAdministrations, avgAdministrationsLastDays])\n\n  return (\n    <>\n      <Container maxWidth='md'>\n        <Grid container direction='column' justify='center' spacing={2}>\n          <Grid item>Termine previsto della campagna vaccinale in <em>{indexedPopulation[area]?.[0]?.nome}</em> contro Sars-CoV-2.</Grid>\n          <Grid item component='h1'>{fmtDate(lastDate)}</Grid>\n          <Grid item>\n            In <Select value={areas.length ? area : ''} onChange={e => setArea(e.target.value)}>{areas.map(a => <MenuItem key={a.area} value={a.area}>{a.nome}</MenuItem>)}</Select> si è iniziato a somministrare il primo vaccino il <em>27 dicembre 2020</em>.\n            A oggi, <em>{fmtDate(lastUpdate).toLowerCase()}</em>, sono state somministrate <em>{fmtInt(administrations)}</em> dosi,\n            ma ne mancano <em>{fmtInt(remainingAdministrations)}</em> per vaccinare l'<TextField value={populationFraction * 100} onChange={e => setPopulationFraction(+e.target.value / 100)} size='small' inputProps={{ type: 'number', min: 60, max: 100, step: 5 }} InputProps={{ endAdornment: <InputAdornment position='end'>%</InputAdornment> }} /> della popolazione\n            con <TextField value={doses} onChange={e => setDoses(+e.target.value)} size='small' inputProps={{ type: 'number', min: 1, max: 2, step: 1 }} /> dosi a testa.\n            Al ritmo di <em>{fmtInt(avgAdministrationsLastDays)}</em> somministrazioni al giorno tenuto negli ultimi <TextField value={lastDays} onChange={e => setLastDays(+e.target.value)} size='small' inputProps={{ type: 'number', min: 1, max: administrationsPerDay.length, step: 1 }} /> giorni,\n            mancano <em>{Math.floor(remainingDays / 365)} anni, {Math.floor((remainingDays % 365) / 30)} mesi e {Math.floor(remainingDays % 12)} giorni</em> prima di raggiungere <em>l'immunità di gregge</em>.\n            Per ottenerla entro <Select value={targetMonth} onChange={e => setTargetMonth(+e.target.value)}>{timeItIT.months.map((m, i) => <MenuItem key={i} value={i}>{m.toLocaleLowerCase()}</MenuItem>)}</Select> <TextField value={targetYear} onChange={e => setTargetYear(+e.target.value)} size='small' inputProps={{ type: 'number', min: (new Date()).getFullYear(), max: (new Date()).getFullYear() + 10, step: 1 }} /> bisognerebbe somministrare una media di <em>{fmtInt(targetAvgAdministrationsPerDay)}</em> dosi al giorno.\n          </Grid>\n          <Box className='Flower lt' />\n          <Box className='Flower lb' />\n          <Box className='Cube rt icon'>\n            <Help color='primary' onClick={handleOpenDialog} />\n          </Box>\n          <Box className='Flower rb' />\n        </Grid>\n      </Container>\n      <Dialog\n        open={dialogOpen}\n        onClose={handleCloseDialog}\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'\n      >\n        <DialogTitle id='alert-dialog-title'>Vaccini per tutti by onData</DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-description'>\n            Questa è un'applicazione di onData.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseDialog} color='secondary' autoFocus>\n            Ok!\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { QueryParamProvider } from 'use-query-params'\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\n\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nconst theme = createMuiTheme({\n  palette: {\n    secondary: {\n      main: '#e82f7d'\n    }\n  },\n  typography: {\n    fontFamily: [\n      '\"Titillium Web\"',\n      'sans-serif'\n    ]\n  }\n})\n\nReactDOM.render(\n  <Router>\n    <QueryParamProvider ReactRouterRoute={Route}>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </QueryParamProvider>\n  </Router>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}